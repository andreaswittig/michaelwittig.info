[{"title":"Großartige Talks:  EC2 Networking Deep Dive","description":"<p>In der Reihe <strong>Großartige Talks</strong> geht es heute um EC2 Networking Deep Dive.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/HexrVfuIY1k\" frameborder=\"0\" allowfullscreen></iframe>","summary":"<p>In der Reihe <strong>Großartige Talks</strong> geht es heute um EC2 Networking Deep Dive.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/HexrVfuIY1k\" frameborder=\"0\" allowfullscreen></iframe>","date":"2015-05-01T08:58:43.000Z","pubdate":"2015-05-01T08:58:43.000Z","pubDate":"2015-05-01T08:58:43.000Z","link":"http://cloudonauten.de/grossartige-talks-ec2-networking-deep-dive/","guid":"956e006f-bfbe-4f28-9d18-b813ffc10d2a","author":"Michael Wittig","comments":null,"origlink":null,"image":{},"source":{},"categories":["EC2","Talk","Deep Dive"],"enclosures":[],"rss:@":{},"rss:title":{"@":{},"#":"Großartige Talks:  EC2 Networking Deep Dive"},"rss:description":{"@":{},"#":"<p>In der Reihe <strong>Großartige Talks</strong> geht es heute um EC2 Networking Deep Dive.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/HexrVfuIY1k\" frameborder=\"0\" allowfullscreen></iframe>"},"rss:link":{"@":{},"#":"http://cloudonauten.de/grossartige-talks-ec2-networking-deep-dive/"},"rss:guid":{"@":{"ispermalink":"false"},"#":"956e006f-bfbe-4f28-9d18-b813ffc10d2a"},"rss:category":[{"@":{},"#":"EC2"},{"@":{},"#":"Talk"},{"@":{},"#":"Deep Dive"}],"dc:creator":{"@":{},"#":"Michael Wittig"},"rss:pubdate":{"@":{},"#":"Fri, 01 May 2015 08:58:43 GMT"},"meta":{"#ns":[{"xmlns:dc":"http://purl.org/dc/elements/1.1/"},{"xmlns:content":"http://purl.org/rss/1.0/modules/content/"},{"xmlns:atom":"http://www.w3.org/2005/Atom"}],"@":[{"xmlns:dc":"http://purl.org/dc/elements/1.1/"},{"xmlns:content":"http://purl.org/rss/1.0/modules/content/"},{"xmlns:atom":"http://www.w3.org/2005/Atom"}],"#xml":{"version":"1.0","encoding":"UTF-8"},"#type":"rss","#version":"2.0","title":"cloudonauten","description":"Cloud Computing im Allgemeinen und AWS im Speziellen.","date":"2015-05-06T12:50:22.000Z","pubdate":"2015-05-06T12:50:22.000Z","pubDate":"2015-05-06T12:50:22.000Z","link":"http://cloudonauten.de/","xmlurl":"http://cloudonauten.de/rss/","xmlUrl":"http://cloudonauten.de/rss/","author":null,"language":null,"favicon":null,"copyright":null,"generator":"Ghost 0.5","cloud":{},"image":{},"categories":[],"rss:@":{},"rss:title":{"@":{},"#":"cloudonauten"},"rss:description":{"@":{},"#":"Cloud Computing im Allgemeinen und AWS im Speziellen."},"rss:link":{"@":{},"#":"http://cloudonauten.de/"},"rss:generator":{"@":{},"#":"Ghost 0.5"},"rss:lastbuilddate":{"@":{},"#":"Wed, 06 May 2015 12:50:22 GMT"},"atom:link":{"@":{"href":"http://cloudonauten.de/rss/","rel":"self","type":"application/rss+xml"}},"rss:ttl":{"@":{},"#":"60"}}},{"title":"Großartige Talks: EC2 Instances Deep Dive","description":"<p>In der Reihe <strong>Großartige Talks</strong> geht es heute um EC2 Instances Deep Dive.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ujGx0tiI1L4\" frameborder=\"0\" allowfullscreen></iframe>","summary":"<p>In der Reihe <strong>Großartige Talks</strong> geht es heute um EC2 Instances Deep Dive.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ujGx0tiI1L4\" frameborder=\"0\" allowfullscreen></iframe>","date":"2015-04-29T17:12:20.000Z","pubdate":"2015-04-29T17:12:20.000Z","pubDate":"2015-04-29T17:12:20.000Z","link":"http://cloudonauten.de/grossartige-talsk/","guid":"bb183070-68ef-42f4-aa38-0a4d703d626e","author":"Michael Wittig","comments":null,"origlink":null,"image":{},"source":{},"categories":["EC2","Talk","Deep Dive"],"enclosures":[],"rss:@":{},"rss:title":{"@":{},"#":"Großartige Talks: EC2 Instances Deep Dive"},"rss:description":{"@":{},"#":"<p>In der Reihe <strong>Großartige Talks</strong> geht es heute um EC2 Instances Deep Dive.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ujGx0tiI1L4\" frameborder=\"0\" allowfullscreen></iframe>"},"rss:link":{"@":{},"#":"http://cloudonauten.de/grossartige-talsk/"},"rss:guid":{"@":{"ispermalink":"false"},"#":"bb183070-68ef-42f4-aa38-0a4d703d626e"},"rss:category":[{"@":{},"#":"EC2"},{"@":{},"#":"Talk"},{"@":{},"#":"Deep Dive"}],"dc:creator":{"@":{},"#":"Michael Wittig"},"rss:pubdate":{"@":{},"#":"Wed, 29 Apr 2015 17:12:20 GMT"},"meta":{"#ns":[{"xmlns:dc":"http://purl.org/dc/elements/1.1/"},{"xmlns:content":"http://purl.org/rss/1.0/modules/content/"},{"xmlns:atom":"http://www.w3.org/2005/Atom"}],"@":[{"xmlns:dc":"http://purl.org/dc/elements/1.1/"},{"xmlns:content":"http://purl.org/rss/1.0/modules/content/"},{"xmlns:atom":"http://www.w3.org/2005/Atom"}],"#xml":{"version":"1.0","encoding":"UTF-8"},"#type":"rss","#version":"2.0","title":"cloudonauten","description":"Cloud Computing im Allgemeinen und AWS im Speziellen.","date":"2015-05-06T12:50:22.000Z","pubdate":"2015-05-06T12:50:22.000Z","pubDate":"2015-05-06T12:50:22.000Z","link":"http://cloudonauten.de/","xmlurl":"http://cloudonauten.de/rss/","xmlUrl":"http://cloudonauten.de/rss/","author":null,"language":null,"favicon":null,"copyright":null,"generator":"Ghost 0.5","cloud":{},"image":{},"categories":[],"rss:@":{},"rss:title":{"@":{},"#":"cloudonauten"},"rss:description":{"@":{},"#":"Cloud Computing im Allgemeinen und AWS im Speziellen."},"rss:link":{"@":{},"#":"http://cloudonauten.de/"},"rss:generator":{"@":{},"#":"Ghost 0.5"},"rss:lastbuilddate":{"@":{},"#":"Wed, 06 May 2015 12:50:22 GMT"},"atom:link":{"@":{"href":"http://cloudonauten.de/rss/","rel":"self","type":"application/rss+xml"}},"rss:ttl":{"@":{},"#":"60"}}},{"title":"Großartige Talks:  Building a DDoS-Resilient Architecture","description":"<p>In der Reihe <strong>Großartige Talks</strong> geht es heute um Building a DDoS-Resilient Architecture with AWS.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/OT2y3DzMEmQ\" frameborder=\"0\" allowfullscreen></iframe>","summary":"<p>In der Reihe <strong>Großartige Talks</strong> geht es heute um Building a DDoS-Resilient Architecture with AWS.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/OT2y3DzMEmQ\" frameborder=\"0\" allowfullscreen></iframe>","date":"2015-04-15T12:34:08.000Z","pubdate":"2015-04-15T12:34:08.000Z","pubDate":"2015-04-15T12:34:08.000Z","link":"http://cloudonauten.de/grossartige-talks-building-a-ddos-resilient-architecture/","guid":"1a2526cc-c142-4d42-9b04-4f44e166a8da","author":"Michael Wittig","comments":null,"origlink":null,"image":{},"source":{},"categories":["Route 53","CloudFront","AutoScaling","Talk","DDoS","Security"],"enclosures":[],"rss:@":{},"rss:title":{"@":{},"#":"Großartige Talks:  Building a DDoS-Resilient Architecture"},"rss:description":{"@":{},"#":"<p>In der Reihe <strong>Großartige Talks</strong> geht es heute um Building a DDoS-Resilient Architecture with AWS.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/OT2y3DzMEmQ\" frameborder=\"0\" allowfullscreen></iframe>"},"rss:link":{"@":{},"#":"http://cloudonauten.de/grossartige-talks-building-a-ddos-resilient-architecture/"},"rss:guid":{"@":{"ispermalink":"false"},"#":"1a2526cc-c142-4d42-9b04-4f44e166a8da"},"rss:category":[{"@":{},"#":"Route 53"},{"@":{},"#":"CloudFront"},{"@":{},"#":"AutoScaling"},{"@":{},"#":"Talk"},{"@":{},"#":"DDoS"},{"@":{},"#":"Security"}],"dc:creator":{"@":{},"#":"Michael Wittig"},"rss:pubdate":{"@":{},"#":"Wed, 15 Apr 2015 12:34:08 GMT"},"meta":{"#ns":[{"xmlns:dc":"http://purl.org/dc/elements/1.1/"},{"xmlns:content":"http://purl.org/rss/1.0/modules/content/"},{"xmlns:atom":"http://www.w3.org/2005/Atom"}],"@":[{"xmlns:dc":"http://purl.org/dc/elements/1.1/"},{"xmlns:content":"http://purl.org/rss/1.0/modules/content/"},{"xmlns:atom":"http://www.w3.org/2005/Atom"}],"#xml":{"version":"1.0","encoding":"UTF-8"},"#type":"rss","#version":"2.0","title":"cloudonauten","description":"Cloud Computing im Allgemeinen und AWS im Speziellen.","date":"2015-05-06T12:50:22.000Z","pubdate":"2015-05-06T12:50:22.000Z","pubDate":"2015-05-06T12:50:22.000Z","link":"http://cloudonauten.de/","xmlurl":"http://cloudonauten.de/rss/","xmlUrl":"http://cloudonauten.de/rss/","author":null,"language":null,"favicon":null,"copyright":null,"generator":"Ghost 0.5","cloud":{},"image":{},"categories":[],"rss:@":{},"rss:title":{"@":{},"#":"cloudonauten"},"rss:description":{"@":{},"#":"Cloud Computing im Allgemeinen und AWS im Speziellen."},"rss:link":{"@":{},"#":"http://cloudonauten.de/"},"rss:generator":{"@":{},"#":"Ghost 0.5"},"rss:lastbuilddate":{"@":{},"#":"Wed, 06 May 2015 12:50:22 GMT"},"atom:link":{"@":{"href":"http://cloudonauten.de/rss/","rel":"self","type":"application/rss+xml"}},"rss:ttl":{"@":{},"#":"60"}}},{"title":"Großartige Talks: NFS und CIFS","description":"<p>In der Reihe <strong>Großartige Talks</strong> geht es heute um NFS und CIFS in AWS.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/xbuiIwEOCAs\" frameborder=\"0\" allowfullscreen></iframe>","summary":"<p>In der Reihe <strong>Großartige Talks</strong> geht es heute um NFS und CIFS in AWS.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/xbuiIwEOCAs\" frameborder=\"0\" allowfullscreen></iframe>","date":"2015-04-08T10:50:45.000Z","pubdate":"2015-04-08T10:50:45.000Z","pubDate":"2015-04-08T10:50:45.000Z","link":"http://cloudonauten.de/grossartige-talks-nfs-und-cifs/","guid":"d272fce7-194a-4e73-911b-53741f64ee1a","author":"Michael Wittig","comments":null,"origlink":null,"image":{},"source":{},"categories":["GlusterFS","Talk","EBS","NFS","CIFS"],"enclosures":[],"rss:@":{},"rss:title":{"@":{},"#":"Großartige Talks: NFS und CIFS"},"rss:description":{"@":{},"#":"<p>In der Reihe <strong>Großartige Talks</strong> geht es heute um NFS und CIFS in AWS.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/xbuiIwEOCAs\" frameborder=\"0\" allowfullscreen></iframe>"},"rss:link":{"@":{},"#":"http://cloudonauten.de/grossartige-talks-nfs-und-cifs/"},"rss:guid":{"@":{"ispermalink":"false"},"#":"d272fce7-194a-4e73-911b-53741f64ee1a"},"rss:category":[{"@":{},"#":"GlusterFS"},{"@":{},"#":"Talk"},{"@":{},"#":"EBS"},{"@":{},"#":"NFS"},{"@":{},"#":"CIFS"}],"dc:creator":{"@":{},"#":"Michael Wittig"},"rss:pubdate":{"@":{},"#":"Wed, 08 Apr 2015 10:50:45 GMT"},"meta":{"#ns":[{"xmlns:dc":"http://purl.org/dc/elements/1.1/"},{"xmlns:content":"http://purl.org/rss/1.0/modules/content/"},{"xmlns:atom":"http://www.w3.org/2005/Atom"}],"@":[{"xmlns:dc":"http://purl.org/dc/elements/1.1/"},{"xmlns:content":"http://purl.org/rss/1.0/modules/content/"},{"xmlns:atom":"http://www.w3.org/2005/Atom"}],"#xml":{"version":"1.0","encoding":"UTF-8"},"#type":"rss","#version":"2.0","title":"cloudonauten","description":"Cloud Computing im Allgemeinen und AWS im Speziellen.","date":"2015-05-06T12:50:22.000Z","pubdate":"2015-05-06T12:50:22.000Z","pubDate":"2015-05-06T12:50:22.000Z","link":"http://cloudonauten.de/","xmlurl":"http://cloudonauten.de/rss/","xmlUrl":"http://cloudonauten.de/rss/","author":null,"language":null,"favicon":null,"copyright":null,"generator":"Ghost 0.5","cloud":{},"image":{},"categories":[],"rss:@":{},"rss:title":{"@":{},"#":"cloudonauten"},"rss:description":{"@":{},"#":"Cloud Computing im Allgemeinen und AWS im Speziellen."},"rss:link":{"@":{},"#":"http://cloudonauten.de/"},"rss:generator":{"@":{},"#":"Ghost 0.5"},"rss:lastbuilddate":{"@":{},"#":"Wed, 06 May 2015 12:50:22 GMT"},"atom:link":{"@":{"href":"http://cloudonauten.de/rss/","rel":"self","type":"application/rss+xml"}},"rss:ttl":{"@":{},"#":"60"}}},{"title":"Blog oder lieber Buch?","description":"<p><a href=\"http://www.michaelwittig.info/\">Michael</a> und <a href=\"http://andreaswittig.info/\">ich</a> schreiben derzeit an einem Buch über AWS. Unser Ziel ist es eine umfangreiche Einführung in die Welt von AWS zu geben. Fokus liegt dabei auf der Automatisierung von IT-Infrastruktur.</p>\n\n<p>Ab sofort ist die Early Access Edition von <em>Amazon Web Services in Action</em> verfügbar. Man kann das Buch also schon lesen, bevor es fertig ist. Verrückte agile Welt!</p>\n\n<p>Mit dem Gutschein-Code mlwittig  gibt es 50% Rabatt: <a href=\"http://www.manning.com/wittig/\">Amazon Web Services in Action</a></p>\n\n<p>Blog oder lieber Buch? Beides. Wir freuen uns sehr über Feedback aus unserer Blog-Leserschaft freuen!</p>","summary":"<p><a href=\"http://www.michaelwittig.info/\">Michael</a> und <a href=\"http://andreaswittig.info/\">ich</a> schreiben derzeit an einem Buch über AWS. Unser Ziel ist es eine umfangreiche Einführung in die Welt von AWS zu geben. Fokus liegt dabei auf der Automatisierung von IT-Infrastruktur.</p>\n\n<p>Ab sofort ist die Early Access Edition von <em>Amazon Web Services in Action</em> verfügbar. Man kann das Buch also schon lesen, bevor es fertig ist. Verrückte agile Welt!</p>\n\n<p>Mit dem Gutschein-Code mlwittig  gibt es 50% Rabatt: <a href=\"http://www.manning.com/wittig/\">Amazon Web Services in Action</a></p>\n\n<p>Blog oder lieber Buch? Beides. Wir freuen uns sehr über Feedback aus unserer Blog-Leserschaft freuen!</p>","date":"2015-03-31T17:28:48.000Z","pubdate":"2015-03-31T17:28:48.000Z","pubDate":"2015-03-31T17:28:48.000Z","link":"http://cloudonauten.de/blog-oder-lieber-buch/","guid":"27aa321d-3e37-4cc7-b36f-ea8d33ecf0d4","author":"Andreas Wittig","comments":null,"origlink":null,"image":{},"source":{},"categories":[],"enclosures":[],"rss:@":{},"rss:title":{"@":{},"#":"Blog oder lieber Buch?"},"rss:description":{"@":{},"#":"<p><a href=\"http://www.michaelwittig.info/\">Michael</a> und <a href=\"http://andreaswittig.info/\">ich</a> schreiben derzeit an einem Buch über AWS. Unser Ziel ist es eine umfangreiche Einführung in die Welt von AWS zu geben. Fokus liegt dabei auf der Automatisierung von IT-Infrastruktur.</p>\n\n<p>Ab sofort ist die Early Access Edition von <em>Amazon Web Services in Action</em> verfügbar. Man kann das Buch also schon lesen, bevor es fertig ist. Verrückte agile Welt!</p>\n\n<p>Mit dem Gutschein-Code mlwittig  gibt es 50% Rabatt: <a href=\"http://www.manning.com/wittig/\">Amazon Web Services in Action</a></p>\n\n<p>Blog oder lieber Buch? Beides. Wir freuen uns sehr über Feedback aus unserer Blog-Leserschaft freuen!</p>"},"rss:link":{"@":{},"#":"http://cloudonauten.de/blog-oder-lieber-buch/"},"rss:guid":{"@":{"ispermalink":"false"},"#":"27aa321d-3e37-4cc7-b36f-ea8d33ecf0d4"},"dc:creator":{"@":{},"#":"Andreas Wittig"},"rss:pubdate":{"@":{},"#":"Tue, 31 Mar 2015 17:28:48 GMT"},"meta":{"#ns":[{"xmlns:dc":"http://purl.org/dc/elements/1.1/"},{"xmlns:content":"http://purl.org/rss/1.0/modules/content/"},{"xmlns:atom":"http://www.w3.org/2005/Atom"}],"@":[{"xmlns:dc":"http://purl.org/dc/elements/1.1/"},{"xmlns:content":"http://purl.org/rss/1.0/modules/content/"},{"xmlns:atom":"http://www.w3.org/2005/Atom"}],"#xml":{"version":"1.0","encoding":"UTF-8"},"#type":"rss","#version":"2.0","title":"cloudonauten","description":"Cloud Computing im Allgemeinen und AWS im Speziellen.","date":"2015-05-06T12:50:22.000Z","pubdate":"2015-05-06T12:50:22.000Z","pubDate":"2015-05-06T12:50:22.000Z","link":"http://cloudonauten.de/","xmlurl":"http://cloudonauten.de/rss/","xmlUrl":"http://cloudonauten.de/rss/","author":null,"language":null,"favicon":null,"copyright":null,"generator":"Ghost 0.5","cloud":{},"image":{},"categories":[],"rss:@":{},"rss:title":{"@":{},"#":"cloudonauten"},"rss:description":{"@":{},"#":"Cloud Computing im Allgemeinen und AWS im Speziellen."},"rss:link":{"@":{},"#":"http://cloudonauten.de/"},"rss:generator":{"@":{},"#":"Ghost 0.5"},"rss:lastbuilddate":{"@":{},"#":"Wed, 06 May 2015 12:50:22 GMT"},"atom:link":{"@":{"href":"http://cloudonauten.de/rss/","rel":"self","type":"application/rss+xml"}},"rss:ttl":{"@":{},"#":"60"}}},{"title":"HA EC2 Instanz ohne ELB","description":"<p>Eine EC2 Instanz ist eine der Dinge, die in AWS nicht von Haus aus ausfallsicher sind. Eine Instanz kann kaputt gehen.</p>\n\n<p>Wie bekomme ich nun eine Applikation, die genau auf einer Instanz laufen kann, möglichst kostengünstig hoch verfügbar?</p>\n\n<h2 id=\"ansatz\">Ansatz</h2>\n\n<p><img src=\"http://cloudonauten.de/content/images/2015/02/HA-EC2-Instance.png\" alt=\"HA EC2 Instanz ohne ELB\"></p>\n\n<p>Der Trick liegt darin, dass man die Instanz in einer AutoScaling Gruppe mit:</p>\n\n<ul>\n<li>MinSize: 1</li>\n<li>MaxSize: 1</li>\n<li>DesiredCapacity: 1</li>\n</ul>\n\n<p>erstellt. Die AutoScaling Gruppe sorgt nun dafür, dass immer genau eine Instanz läuft. Geht diese Instanz kaput wir sie automatisch ersetzt. <br>\nDas Problem dabei ist nun, dass sich damit auch die IP-Adresse der Instanz ändert. Wie können wir die Instanz entkoppeln? Dazu nutzen wir Route53. Beim starten der Instanz legt die Instanz selbst ein Record Set in Route53 an, sodass zum Beispiel servicexyz.meinedomain.de auf die öffentliche Adresse der Instanz zeigt.</p>\n\n<p>Genau das kann mit den Tools:</p>\n\n<ul>\n<li>Node.js basiert: <a href=\"https://github.com/widdix/node-route53-updater\">https://github.com/widdix/node-route53-updater</a></li>\n<li>Java basiert: <a href=\"https://github.com/taimos/route53-updater\">https://github.com/taimos/route53-updater</a></li>\n</ul>\n\n<p>erreicht werden. Nun einfach beim starten der Instanz folgenden Zeile ausführen</p>\n\n<pre><code>route53-updater --action UPDATE --hostedZoneName meinedomain.de. --recordSetName servicexyz.meinedomain.de.\n</code></pre>\n\n<p>Und innerhalb von einer Minute zeigt servicexyz.meinedomain.de auf die neue Instanz.</p>","summary":"<p>Eine EC2 Instanz ist eine der Dinge, die in AWS nicht von Haus aus ausfallsicher sind. Eine Instanz kann kaputt gehen.</p>\n\n<p>Wie bekomme ich nun eine Applikation, die genau auf einer Instanz laufen kann, möglichst kostengünstig hoch verfügbar?</p>\n\n<h2 id=\"ansatz\">Ansatz</h2>\n\n<p><img src=\"http://cloudonauten.de/content/images/2015/02/HA-EC2-Instance.png\" alt=\"HA EC2 Instanz ohne ELB\"></p>\n\n<p>Der Trick liegt darin, dass man die Instanz in einer AutoScaling Gruppe mit:</p>\n\n<ul>\n<li>MinSize: 1</li>\n<li>MaxSize: 1</li>\n<li>DesiredCapacity: 1</li>\n</ul>\n\n<p>erstellt. Die AutoScaling Gruppe sorgt nun dafür, dass immer genau eine Instanz läuft. Geht diese Instanz kaput wir sie automatisch ersetzt. <br>\nDas Problem dabei ist nun, dass sich damit auch die IP-Adresse der Instanz ändert. Wie können wir die Instanz entkoppeln? Dazu nutzen wir Route53. Beim starten der Instanz legt die Instanz selbst ein Record Set in Route53 an, sodass zum Beispiel servicexyz.meinedomain.de auf die öffentliche Adresse der Instanz zeigt.</p>\n\n<p>Genau das kann mit den Tools:</p>\n\n<ul>\n<li>Node.js basiert: <a href=\"https://github.com/widdix/node-route53-updater\">https://github.com/widdix/node-route53-updater</a></li>\n<li>Java basiert: <a href=\"https://github.com/taimos/route53-updater\">https://github.com/taimos/route53-updater</a></li>\n</ul>\n\n<p>erreicht werden. Nun einfach beim starten der Instanz folgenden Zeile ausführen</p>\n\n<pre><code>route53-updater --action UPDATE --hostedZoneName meinedomain.de. --recordSetName servicexyz.meinedomain.de.\n</code></pre>\n\n<p>Und innerhalb von einer Minute zeigt servicexyz.meinedomain.de auf die neue Instanz.</p>","date":"2015-02-20T09:29:27.000Z","pubdate":"2015-02-20T09:29:27.000Z","pubDate":"2015-02-20T09:29:27.000Z","link":"http://cloudonauten.de/ha-ec2-instanz/","guid":"5c72dcf6-c199-4df1-8054-7dadf27113c3","author":"Michael Wittig","comments":null,"origlink":null,"image":{},"source":{},"categories":["Route 53","EC2","AutoScaling","High availability"],"enclosures":[],"rss:@":{},"rss:title":{"@":{},"#":"HA EC2 Instanz ohne ELB"},"rss:description":{"@":{},"#":"<p>Eine EC2 Instanz ist eine der Dinge, die in AWS nicht von Haus aus ausfallsicher sind. Eine Instanz kann kaputt gehen.</p>\n\n<p>Wie bekomme ich nun eine Applikation, die genau auf einer Instanz laufen kann, möglichst kostengünstig hoch verfügbar?</p>\n\n<h2 id=\"ansatz\">Ansatz</h2>\n\n<p><img src=\"http://cloudonauten.de/content/images/2015/02/HA-EC2-Instance.png\" alt=\"HA EC2 Instanz ohne ELB\"></p>\n\n<p>Der Trick liegt darin, dass man die Instanz in einer AutoScaling Gruppe mit:</p>\n\n<ul>\n<li>MinSize: 1</li>\n<li>MaxSize: 1</li>\n<li>DesiredCapacity: 1</li>\n</ul>\n\n<p>erstellt. Die AutoScaling Gruppe sorgt nun dafür, dass immer genau eine Instanz läuft. Geht diese Instanz kaput wir sie automatisch ersetzt. <br>\nDas Problem dabei ist nun, dass sich damit auch die IP-Adresse der Instanz ändert. Wie können wir die Instanz entkoppeln? Dazu nutzen wir Route53. Beim starten der Instanz legt die Instanz selbst ein Record Set in Route53 an, sodass zum Beispiel servicexyz.meinedomain.de auf die öffentliche Adresse der Instanz zeigt.</p>\n\n<p>Genau das kann mit den Tools:</p>\n\n<ul>\n<li>Node.js basiert: <a href=\"https://github.com/widdix/node-route53-updater\">https://github.com/widdix/node-route53-updater</a></li>\n<li>Java basiert: <a href=\"https://github.com/taimos/route53-updater\">https://github.com/taimos/route53-updater</a></li>\n</ul>\n\n<p>erreicht werden. Nun einfach beim starten der Instanz folgenden Zeile ausführen</p>\n\n<pre><code>route53-updater --action UPDATE --hostedZoneName meinedomain.de. --recordSetName servicexyz.meinedomain.de.\n</code></pre>\n\n<p>Und innerhalb von einer Minute zeigt servicexyz.meinedomain.de auf die neue Instanz.</p>"},"rss:link":{"@":{},"#":"http://cloudonauten.de/ha-ec2-instanz/"},"rss:guid":{"@":{"ispermalink":"false"},"#":"5c72dcf6-c199-4df1-8054-7dadf27113c3"},"rss:category":[{"@":{},"#":"Route 53"},{"@":{},"#":"EC2"},{"@":{},"#":"AutoScaling"},{"@":{},"#":"High availability"}],"dc:creator":{"@":{},"#":"Michael Wittig"},"rss:pubdate":{"@":{},"#":"Fri, 20 Feb 2015 09:29:27 GMT"},"meta":{"#ns":[{"xmlns:dc":"http://purl.org/dc/elements/1.1/"},{"xmlns:content":"http://purl.org/rss/1.0/modules/content/"},{"xmlns:atom":"http://www.w3.org/2005/Atom"}],"@":[{"xmlns:dc":"http://purl.org/dc/elements/1.1/"},{"xmlns:content":"http://purl.org/rss/1.0/modules/content/"},{"xmlns:atom":"http://www.w3.org/2005/Atom"}],"#xml":{"version":"1.0","encoding":"UTF-8"},"#type":"rss","#version":"2.0","title":"cloudonauten","description":"Cloud Computing im Allgemeinen und AWS im Speziellen.","date":"2015-05-06T12:50:22.000Z","pubdate":"2015-05-06T12:50:22.000Z","pubDate":"2015-05-06T12:50:22.000Z","link":"http://cloudonauten.de/","xmlurl":"http://cloudonauten.de/rss/","xmlUrl":"http://cloudonauten.de/rss/","author":null,"language":null,"favicon":null,"copyright":null,"generator":"Ghost 0.5","cloud":{},"image":{},"categories":[],"rss:@":{},"rss:title":{"@":{},"#":"cloudonauten"},"rss:description":{"@":{},"#":"Cloud Computing im Allgemeinen und AWS im Speziellen."},"rss:link":{"@":{},"#":"http://cloudonauten.de/"},"rss:generator":{"@":{},"#":"Ghost 0.5"},"rss:lastbuilddate":{"@":{},"#":"Wed, 06 May 2015 12:50:22 GMT"},"atom:link":{"@":{"href":"http://cloudonauten.de/rss/","rel":"self","type":"application/rss+xml"}},"rss:ttl":{"@":{},"#":"60"}}},{"title":"5 Mythen über Cloud Computing","description":"<p>Mit diesem Artikel möchte ich mit 5 Mythen aufräumen, die über Cloud Computing durch unsere Branche geistern.</p>\n\n<h2 id=\"1grtervorteilistkosteneinsparung\">1. Größter Vorteil ist Kosteneinsparung</h2>\n\n<p>Ja, durch Cloud Computing sind durch höhere Auslastung und den \"economies of scale\"-Effekt meist Kosteneinsparungen möglich. Das ist aber häufig nicht der größte Vorteil, der durch den Einsatz von Cloud Computing entsteht. Viel wichtiger ist die hohe Flexibilität, die durch die Virtualisierung des kompletten Rechenzentrums entsteht. Die IT-Infrastruktur kann schnell und kostengünstig an neue Gegebenheiten angepasst werden. Das ermöglicht eine verkürzte Time-To-Market und eröffnet neue Möglichkeiten für Innovationen.</p>\n\n<h2 id=\"2produktelassensichnurmitcloudimnamenverkaufen\">2. Produkte lassen sich nur mit Cloud im Namen verkaufen</h2>\n\n<p>Kaum ein Software-Produkt oder IT-Projekt, dass nicht unter dem Label Cloud beworben wird. Doch nicht überall wo Cloud drauf steht, ist auch wirklich Cloud drin. Wer nach Pay-per-Use, Hochverfügbarkeit und Skalierbarkeit fragt, wird schnell die Spreu vom Weizen trennen können.</p>\n\n<h2 id=\"3onpremisebietethheresicherheitalscloud\">3. On-Premise bietet höhere Sicherheit als Cloud</h2>\n\n<p>Das Sicherheitsniveau, dass mit eigenen Servern und Rechenzentren erreicht werden kann, liegt nicht unbedingt über dem Sicherheitsniveau von Cloud Computing. Die Sicherheitsstandards, die große Cloud Anbieter, wie z.B. Amazon Web Services (AWS), bieten können, sind in der eigenen Organisation nur schwer umzusetzen. Auch wird es nur schwer möglich sein, Sicherheitsexperten auf einem ähnlichen Level zu beschäftigen.</p>\n\n<h2 id=\"4cloudistnichtfrgeschftskritischeanwendungengeeignet\">4. Cloud ist nicht für geschäftskritische Anwendungen geeignet</h2>\n\n<p>Cloud Computing ist erwachsen geworden. Die Liste der Unternehmen, die erfolgreich geschäftskritische Anwendungen in der Cloud betreiben wird immer länger. Man führe sich in diesem Zusammenhang vor Augen, dass einer der größten Onlinehändler (Amazon.com) sein Geschäft über die Cloud (AWS) abwickelt. Wer Risiko minimieren möchte, beginnt den Weg in die Cloud mit kleinen Schritten und lernt Stück für Stück dazu. Dann steht auch dem großen Schritt, der Migration einer geschäftskritischen Anwendung, nichts mehr im Wege.</p>\n\n<h2 id=\"5migrationindiecloudbringtautomatischallecloudvorteile\">5. Migration in die Cloud bringt automatisch alle Cloud-Vorteile</h2>\n\n<p>Wenn Applikationen aus der alten Welt in die Cloud migriert werden, können meist nicht alle Vorteile der Cloud voll ausgenutzt werden. Wer zum Beispiel von Fehlertoleranz und vertikaler Skalierung profitieren möchte, muss dafür sorgen, dass die virtuellen Server keinen Zustand speichern. Das ist mit bestehenden Software oft nur schwer umzusetzen. Als Ausweg bleiben Kompromisse beim Einsatz in der Cloud oder die Investition in cloud-fähige Applikationen.</p>","summary":"<p>Mit diesem Artikel möchte ich mit 5 Mythen aufräumen, die über Cloud Computing durch unsere Branche geistern.</p>\n\n<h2 id=\"1grtervorteilistkosteneinsparung\">1. Größter Vorteil ist Kosteneinsparung</h2>\n\n<p>Ja, durch Cloud Computing sind durch höhere Auslastung und den \"economies of scale\"-Effekt meist Kosteneinsparungen möglich. Das ist aber häufig nicht der größte Vorteil, der durch den Einsatz von Cloud Computing entsteht. Viel wichtiger ist die hohe Flexibilität, die durch die Virtualisierung des kompletten Rechenzentrums entsteht. Die IT-Infrastruktur kann schnell und kostengünstig an neue Gegebenheiten angepasst werden. Das ermöglicht eine verkürzte Time-To-Market und eröffnet neue Möglichkeiten für Innovationen.</p>\n\n<h2 id=\"2produktelassensichnurmitcloudimnamenverkaufen\">2. Produkte lassen sich nur mit Cloud im Namen verkaufen</h2>\n\n<p>Kaum ein Software-Produkt oder IT-Projekt, dass nicht unter dem Label Cloud beworben wird. Doch nicht überall wo Cloud drauf steht, ist auch wirklich Cloud drin. Wer nach Pay-per-Use, Hochverfügbarkeit und Skalierbarkeit fragt, wird schnell die Spreu vom Weizen trennen können.</p>\n\n<h2 id=\"3onpremisebietethheresicherheitalscloud\">3. On-Premise bietet höhere Sicherheit als Cloud</h2>\n\n<p>Das Sicherheitsniveau, dass mit eigenen Servern und Rechenzentren erreicht werden kann, liegt nicht unbedingt über dem Sicherheitsniveau von Cloud Computing. Die Sicherheitsstandards, die große Cloud Anbieter, wie z.B. Amazon Web Services (AWS), bieten können, sind in der eigenen Organisation nur schwer umzusetzen. Auch wird es nur schwer möglich sein, Sicherheitsexperten auf einem ähnlichen Level zu beschäftigen.</p>\n\n<h2 id=\"4cloudistnichtfrgeschftskritischeanwendungengeeignet\">4. Cloud ist nicht für geschäftskritische Anwendungen geeignet</h2>\n\n<p>Cloud Computing ist erwachsen geworden. Die Liste der Unternehmen, die erfolgreich geschäftskritische Anwendungen in der Cloud betreiben wird immer länger. Man führe sich in diesem Zusammenhang vor Augen, dass einer der größten Onlinehändler (Amazon.com) sein Geschäft über die Cloud (AWS) abwickelt. Wer Risiko minimieren möchte, beginnt den Weg in die Cloud mit kleinen Schritten und lernt Stück für Stück dazu. Dann steht auch dem großen Schritt, der Migration einer geschäftskritischen Anwendung, nichts mehr im Wege.</p>\n\n<h2 id=\"5migrationindiecloudbringtautomatischallecloudvorteile\">5. Migration in die Cloud bringt automatisch alle Cloud-Vorteile</h2>\n\n<p>Wenn Applikationen aus der alten Welt in die Cloud migriert werden, können meist nicht alle Vorteile der Cloud voll ausgenutzt werden. Wer zum Beispiel von Fehlertoleranz und vertikaler Skalierung profitieren möchte, muss dafür sorgen, dass die virtuellen Server keinen Zustand speichern. Das ist mit bestehenden Software oft nur schwer umzusetzen. Als Ausweg bleiben Kompromisse beim Einsatz in der Cloud oder die Investition in cloud-fähige Applikationen.</p>","date":"2015-02-09T14:25:26.000Z","pubdate":"2015-02-09T14:25:26.000Z","pubDate":"2015-02-09T14:25:26.000Z","link":"http://cloudonauten.de/5-mythen-uber-cloud-computing/","guid":"e4b85178-2ac5-456b-9d42-6000d7685c57","author":"Andreas Wittig","comments":null,"origlink":null,"image":{},"source":{},"categories":[],"enclosures":[],"rss:@":{},"rss:title":{"@":{},"#":"5 Mythen über Cloud Computing"},"rss:description":{"@":{},"#":"<p>Mit diesem Artikel möchte ich mit 5 Mythen aufräumen, die über Cloud Computing durch unsere Branche geistern.</p>\n\n<h2 id=\"1grtervorteilistkosteneinsparung\">1. Größter Vorteil ist Kosteneinsparung</h2>\n\n<p>Ja, durch Cloud Computing sind durch höhere Auslastung und den \"economies of scale\"-Effekt meist Kosteneinsparungen möglich. Das ist aber häufig nicht der größte Vorteil, der durch den Einsatz von Cloud Computing entsteht. Viel wichtiger ist die hohe Flexibilität, die durch die Virtualisierung des kompletten Rechenzentrums entsteht. Die IT-Infrastruktur kann schnell und kostengünstig an neue Gegebenheiten angepasst werden. Das ermöglicht eine verkürzte Time-To-Market und eröffnet neue Möglichkeiten für Innovationen.</p>\n\n<h2 id=\"2produktelassensichnurmitcloudimnamenverkaufen\">2. Produkte lassen sich nur mit Cloud im Namen verkaufen</h2>\n\n<p>Kaum ein Software-Produkt oder IT-Projekt, dass nicht unter dem Label Cloud beworben wird. Doch nicht überall wo Cloud drauf steht, ist auch wirklich Cloud drin. Wer nach Pay-per-Use, Hochverfügbarkeit und Skalierbarkeit fragt, wird schnell die Spreu vom Weizen trennen können.</p>\n\n<h2 id=\"3onpremisebietethheresicherheitalscloud\">3. On-Premise bietet höhere Sicherheit als Cloud</h2>\n\n<p>Das Sicherheitsniveau, dass mit eigenen Servern und Rechenzentren erreicht werden kann, liegt nicht unbedingt über dem Sicherheitsniveau von Cloud Computing. Die Sicherheitsstandards, die große Cloud Anbieter, wie z.B. Amazon Web Services (AWS), bieten können, sind in der eigenen Organisation nur schwer umzusetzen. Auch wird es nur schwer möglich sein, Sicherheitsexperten auf einem ähnlichen Level zu beschäftigen.</p>\n\n<h2 id=\"4cloudistnichtfrgeschftskritischeanwendungengeeignet\">4. Cloud ist nicht für geschäftskritische Anwendungen geeignet</h2>\n\n<p>Cloud Computing ist erwachsen geworden. Die Liste der Unternehmen, die erfolgreich geschäftskritische Anwendungen in der Cloud betreiben wird immer länger. Man führe sich in diesem Zusammenhang vor Augen, dass einer der größten Onlinehändler (Amazon.com) sein Geschäft über die Cloud (AWS) abwickelt. Wer Risiko minimieren möchte, beginnt den Weg in die Cloud mit kleinen Schritten und lernt Stück für Stück dazu. Dann steht auch dem großen Schritt, der Migration einer geschäftskritischen Anwendung, nichts mehr im Wege.</p>\n\n<h2 id=\"5migrationindiecloudbringtautomatischallecloudvorteile\">5. Migration in die Cloud bringt automatisch alle Cloud-Vorteile</h2>\n\n<p>Wenn Applikationen aus der alten Welt in die Cloud migriert werden, können meist nicht alle Vorteile der Cloud voll ausgenutzt werden. Wer zum Beispiel von Fehlertoleranz und vertikaler Skalierung profitieren möchte, muss dafür sorgen, dass die virtuellen Server keinen Zustand speichern. Das ist mit bestehenden Software oft nur schwer umzusetzen. Als Ausweg bleiben Kompromisse beim Einsatz in der Cloud oder die Investition in cloud-fähige Applikationen.</p>"},"rss:link":{"@":{},"#":"http://cloudonauten.de/5-mythen-uber-cloud-computing/"},"rss:guid":{"@":{"ispermalink":"false"},"#":"e4b85178-2ac5-456b-9d42-6000d7685c57"},"dc:creator":{"@":{},"#":"Andreas Wittig"},"rss:pubdate":{"@":{},"#":"Mon, 09 Feb 2015 14:25:26 GMT"},"meta":{"#ns":[{"xmlns:dc":"http://purl.org/dc/elements/1.1/"},{"xmlns:content":"http://purl.org/rss/1.0/modules/content/"},{"xmlns:atom":"http://www.w3.org/2005/Atom"}],"@":[{"xmlns:dc":"http://purl.org/dc/elements/1.1/"},{"xmlns:content":"http://purl.org/rss/1.0/modules/content/"},{"xmlns:atom":"http://www.w3.org/2005/Atom"}],"#xml":{"version":"1.0","encoding":"UTF-8"},"#type":"rss","#version":"2.0","title":"cloudonauten","description":"Cloud Computing im Allgemeinen und AWS im Speziellen.","date":"2015-05-06T12:50:22.000Z","pubdate":"2015-05-06T12:50:22.000Z","pubDate":"2015-05-06T12:50:22.000Z","link":"http://cloudonauten.de/","xmlurl":"http://cloudonauten.de/rss/","xmlUrl":"http://cloudonauten.de/rss/","author":null,"language":null,"favicon":null,"copyright":null,"generator":"Ghost 0.5","cloud":{},"image":{},"categories":[],"rss:@":{},"rss:title":{"@":{},"#":"cloudonauten"},"rss:description":{"@":{},"#":"Cloud Computing im Allgemeinen und AWS im Speziellen."},"rss:link":{"@":{},"#":"http://cloudonauten.de/"},"rss:generator":{"@":{},"#":"Ghost 0.5"},"rss:lastbuilddate":{"@":{},"#":"Wed, 06 May 2015 12:50:22 GMT"},"atom:link":{"@":{"href":"http://cloudonauten.de/rss/","rel":"self","type":"application/rss+xml"}},"rss:ttl":{"@":{},"#":"60"}}},{"title":"Multi-Region ElastiCache","description":"<p>Wenn die Kunden aus der ganzen Welt kommen sollte man sich über ein Multi-Region Deployment Gedanken machen. Die Idee ist dabei die Daten so nahe an den Kunden zu bringen wie möglich. Dadurch wird die Latenz für den Kunden minimiert. Die meisten Services in AWS sind von Haus aus an eine Region gebunden.</p>\n\n<p>Wie kann man nun also mehrere Regions verbinden? Die Antwort lautet Synchronisation / Replikation. Dabei ergeben sich neue Schwierigkeiten. Zwei unabhängige MySQL Datenbanken in Region eu-west-1 (Irland) und us-east-1 (USA) lassen sich nur schwer synchronisieren wenn in beide geschrieben werden darf. Die Latenz zwischen der Ostküste der USA und Irland ist schlicht zu hoch um Transaktionen darüber laufen zu lassen. Also wenn in den USA geschrieben wird so lange zu warten bis der Schreibvorgang auch in Irland bestätigt wurde. Es muss eine asynchrone Synchronisation verwendet werden. Diese bringt allerdings Probleme von Konflikten mit sich wenn ein Datensatz gleichzeitig in beiden Regions geändert wird. </p>\n\n<h2 id=\"konzept\">Konzept</h2>\n\n<p><img src=\"http://cloudonauten.de/content/images/2015/02/Multiregion-Konzept.png\" alt=\"Multi-Region Konzept\"></p>\n\n<p>Um das Problem der konkurrierenden Schreibzugriffe zu umgehen verwenden wir nur eine <a href=\"http://aws.amazon.com/de/dynamodb/\">DynamoDB Datenbank</a> in eu-west-1. In diese Haupt-Datenbank wird hauptsächlich geschrieben. Bei jedem Schreibvorgang (Insert, Update, Delete) wird eine Nachricht auf ein <a href=\"http://aws.amazon.com/de/sns/\">SNS Update Topic</a> publiziert.</p>\n\n<p>In jeder Region läuft ein <a href=\"http://aws.amazon.com/de/elasticache/\">ElastiCache Cluster</a> das den Datenbestand aus der Haupt-Datenbank spiegelt. Über die von SNS angebotenen Subscriber wird das SNS Update Topic mit je einer <a href=\"http://aws.amazon.com/de/sqs/\">SQS Update Queue</a> pro Region verbunden. In jeder Region laufen <a href=\"http://aws.amazon.com/de/ec2/\">EC2 Instanzen</a> die neben ihrer eigentlichen Arbeit noch auf die Update Queue hören und Änderungen zum ElastiCache Cluster schicken. Will eine EC2 Instanz Daten lesen so werden die Daten aus dem ElastiCache Cluster gelesen.</p>\n\n<h3 id=\"vorteile\">Vorteile</h3>\n\n<p>Jede Änderung wird nur einmal zwischen den Regionen transportiert. Es werden nur Managed Services eingesetzt, dadurch ist der Betriebsaufwand sehr gering.</p>\n\n<h3 id=\"nachteile\">Nachteile</h3>\n\n<p>Es muss ein Protokoll eingesetzt werden, welches sicherstellt, dass Updates in der richtigen Reihenfolge eingespielt werden. Ein einfaches Protokoll kann für jeden Datensatz eine Versionsnummer verwenden und das Update nur dann einspielen, wenn di Version größer als die aktuelle Version im Cache ist. Andere Updates werden einfach verworfen.</p>\n\n<h2 id=\"alternativen\">Alternativen</h2>\n\n<ul>\n<li><a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html\">DynamoDB Streams</a> sind noch in der Preview Phase, daher noch nicht für produktive Einsätze gedacht</li>\n</ul>","summary":"<p>Wenn die Kunden aus der ganzen Welt kommen sollte man sich über ein Multi-Region Deployment Gedanken machen. Die Idee ist dabei die Daten so nahe an den Kunden zu bringen wie möglich. Dadurch wird die Latenz für den Kunden minimiert. Die meisten Services in AWS sind von Haus aus an eine Region gebunden.</p>\n\n<p>Wie kann man nun also mehrere Regions verbinden? Die Antwort lautet Synchronisation / Replikation. Dabei ergeben sich neue Schwierigkeiten. Zwei unabhängige MySQL Datenbanken in Region eu-west-1 (Irland) und us-east-1 (USA) lassen sich nur schwer synchronisieren wenn in beide geschrieben werden darf. Die Latenz zwischen der Ostküste der USA und Irland ist schlicht zu hoch um Transaktionen darüber laufen zu lassen. Also wenn in den USA geschrieben wird so lange zu warten bis der Schreibvorgang auch in Irland bestätigt wurde. Es muss eine asynchrone Synchronisation verwendet werden. Diese bringt allerdings Probleme von Konflikten mit sich wenn ein Datensatz gleichzeitig in beiden Regions geändert wird. </p>\n\n<h2 id=\"konzept\">Konzept</h2>\n\n<p><img src=\"http://cloudonauten.de/content/images/2015/02/Multiregion-Konzept.png\" alt=\"Multi-Region Konzept\"></p>\n\n<p>Um das Problem der konkurrierenden Schreibzugriffe zu umgehen verwenden wir nur eine <a href=\"http://aws.amazon.com/de/dynamodb/\">DynamoDB Datenbank</a> in eu-west-1. In diese Haupt-Datenbank wird hauptsächlich geschrieben. Bei jedem Schreibvorgang (Insert, Update, Delete) wird eine Nachricht auf ein <a href=\"http://aws.amazon.com/de/sns/\">SNS Update Topic</a> publiziert.</p>\n\n<p>In jeder Region läuft ein <a href=\"http://aws.amazon.com/de/elasticache/\">ElastiCache Cluster</a> das den Datenbestand aus der Haupt-Datenbank spiegelt. Über die von SNS angebotenen Subscriber wird das SNS Update Topic mit je einer <a href=\"http://aws.amazon.com/de/sqs/\">SQS Update Queue</a> pro Region verbunden. In jeder Region laufen <a href=\"http://aws.amazon.com/de/ec2/\">EC2 Instanzen</a> die neben ihrer eigentlichen Arbeit noch auf die Update Queue hören und Änderungen zum ElastiCache Cluster schicken. Will eine EC2 Instanz Daten lesen so werden die Daten aus dem ElastiCache Cluster gelesen.</p>\n\n<h3 id=\"vorteile\">Vorteile</h3>\n\n<p>Jede Änderung wird nur einmal zwischen den Regionen transportiert. Es werden nur Managed Services eingesetzt, dadurch ist der Betriebsaufwand sehr gering.</p>\n\n<h3 id=\"nachteile\">Nachteile</h3>\n\n<p>Es muss ein Protokoll eingesetzt werden, welches sicherstellt, dass Updates in der richtigen Reihenfolge eingespielt werden. Ein einfaches Protokoll kann für jeden Datensatz eine Versionsnummer verwenden und das Update nur dann einspielen, wenn di Version größer als die aktuelle Version im Cache ist. Andere Updates werden einfach verworfen.</p>\n\n<h2 id=\"alternativen\">Alternativen</h2>\n\n<ul>\n<li><a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html\">DynamoDB Streams</a> sind noch in der Preview Phase, daher noch nicht für produktive Einsätze gedacht</li>\n</ul>","date":"2015-02-05T07:02:03.000Z","pubdate":"2015-02-05T07:02:03.000Z","pubDate":"2015-02-05T07:02:03.000Z","link":"http://cloudonauten.de/multi-region-elasticache/","guid":"4f6a2d79-aeac-4d53-836e-1c189face57d","author":"Michael Wittig","comments":null,"origlink":null,"image":{},"source":{},"categories":["aws","EC2","ElastiCache","SQS","SNS","DynamoDB","Multi-Region"],"enclosures":[],"rss:@":{},"rss:title":{"@":{},"#":"Multi-Region ElastiCache"},"rss:description":{"@":{},"#":"<p>Wenn die Kunden aus der ganzen Welt kommen sollte man sich über ein Multi-Region Deployment Gedanken machen. Die Idee ist dabei die Daten so nahe an den Kunden zu bringen wie möglich. Dadurch wird die Latenz für den Kunden minimiert. Die meisten Services in AWS sind von Haus aus an eine Region gebunden.</p>\n\n<p>Wie kann man nun also mehrere Regions verbinden? Die Antwort lautet Synchronisation / Replikation. Dabei ergeben sich neue Schwierigkeiten. Zwei unabhängige MySQL Datenbanken in Region eu-west-1 (Irland) und us-east-1 (USA) lassen sich nur schwer synchronisieren wenn in beide geschrieben werden darf. Die Latenz zwischen der Ostküste der USA und Irland ist schlicht zu hoch um Transaktionen darüber laufen zu lassen. Also wenn in den USA geschrieben wird so lange zu warten bis der Schreibvorgang auch in Irland bestätigt wurde. Es muss eine asynchrone Synchronisation verwendet werden. Diese bringt allerdings Probleme von Konflikten mit sich wenn ein Datensatz gleichzeitig in beiden Regions geändert wird. </p>\n\n<h2 id=\"konzept\">Konzept</h2>\n\n<p><img src=\"http://cloudonauten.de/content/images/2015/02/Multiregion-Konzept.png\" alt=\"Multi-Region Konzept\"></p>\n\n<p>Um das Problem der konkurrierenden Schreibzugriffe zu umgehen verwenden wir nur eine <a href=\"http://aws.amazon.com/de/dynamodb/\">DynamoDB Datenbank</a> in eu-west-1. In diese Haupt-Datenbank wird hauptsächlich geschrieben. Bei jedem Schreibvorgang (Insert, Update, Delete) wird eine Nachricht auf ein <a href=\"http://aws.amazon.com/de/sns/\">SNS Update Topic</a> publiziert.</p>\n\n<p>In jeder Region läuft ein <a href=\"http://aws.amazon.com/de/elasticache/\">ElastiCache Cluster</a> das den Datenbestand aus der Haupt-Datenbank spiegelt. Über die von SNS angebotenen Subscriber wird das SNS Update Topic mit je einer <a href=\"http://aws.amazon.com/de/sqs/\">SQS Update Queue</a> pro Region verbunden. In jeder Region laufen <a href=\"http://aws.amazon.com/de/ec2/\">EC2 Instanzen</a> die neben ihrer eigentlichen Arbeit noch auf die Update Queue hören und Änderungen zum ElastiCache Cluster schicken. Will eine EC2 Instanz Daten lesen so werden die Daten aus dem ElastiCache Cluster gelesen.</p>\n\n<h3 id=\"vorteile\">Vorteile</h3>\n\n<p>Jede Änderung wird nur einmal zwischen den Regionen transportiert. Es werden nur Managed Services eingesetzt, dadurch ist der Betriebsaufwand sehr gering.</p>\n\n<h3 id=\"nachteile\">Nachteile</h3>\n\n<p>Es muss ein Protokoll eingesetzt werden, welches sicherstellt, dass Updates in der richtigen Reihenfolge eingespielt werden. Ein einfaches Protokoll kann für jeden Datensatz eine Versionsnummer verwenden und das Update nur dann einspielen, wenn di Version größer als die aktuelle Version im Cache ist. Andere Updates werden einfach verworfen.</p>\n\n<h2 id=\"alternativen\">Alternativen</h2>\n\n<ul>\n<li><a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html\">DynamoDB Streams</a> sind noch in der Preview Phase, daher noch nicht für produktive Einsätze gedacht</li>\n</ul>"},"rss:link":{"@":{},"#":"http://cloudonauten.de/multi-region-elasticache/"},"rss:guid":{"@":{"ispermalink":"false"},"#":"4f6a2d79-aeac-4d53-836e-1c189face57d"},"rss:category":[{"@":{},"#":"aws"},{"@":{},"#":"EC2"},{"@":{},"#":"ElastiCache"},{"@":{},"#":"SQS"},{"@":{},"#":"SNS"},{"@":{},"#":"DynamoDB"},{"@":{},"#":"Multi-Region"}],"dc:creator":{"@":{},"#":"Michael Wittig"},"rss:pubdate":{"@":{},"#":"Thu, 05 Feb 2015 07:02:03 GMT"},"meta":{"#ns":[{"xmlns:dc":"http://purl.org/dc/elements/1.1/"},{"xmlns:content":"http://purl.org/rss/1.0/modules/content/"},{"xmlns:atom":"http://www.w3.org/2005/Atom"}],"@":[{"xmlns:dc":"http://purl.org/dc/elements/1.1/"},{"xmlns:content":"http://purl.org/rss/1.0/modules/content/"},{"xmlns:atom":"http://www.w3.org/2005/Atom"}],"#xml":{"version":"1.0","encoding":"UTF-8"},"#type":"rss","#version":"2.0","title":"cloudonauten","description":"Cloud Computing im Allgemeinen und AWS im Speziellen.","date":"2015-05-06T12:50:22.000Z","pubdate":"2015-05-06T12:50:22.000Z","pubDate":"2015-05-06T12:50:22.000Z","link":"http://cloudonauten.de/","xmlurl":"http://cloudonauten.de/rss/","xmlUrl":"http://cloudonauten.de/rss/","author":null,"language":null,"favicon":null,"copyright":null,"generator":"Ghost 0.5","cloud":{},"image":{},"categories":[],"rss:@":{},"rss:title":{"@":{},"#":"cloudonauten"},"rss:description":{"@":{},"#":"Cloud Computing im Allgemeinen und AWS im Speziellen."},"rss:link":{"@":{},"#":"http://cloudonauten.de/"},"rss:generator":{"@":{},"#":"Ghost 0.5"},"rss:lastbuilddate":{"@":{},"#":"Wed, 06 May 2015 12:50:22 GMT"},"atom:link":{"@":{"href":"http://cloudonauten.de/rss/","rel":"self","type":"application/rss+xml"}},"rss:ttl":{"@":{},"#":"60"}}},{"title":"Hochverfügbarkeit für Webshops","description":"<p>Ein Webshop der zur Weihnachtszeit längere Zeit aufgrund von technischen Problemen nicht oder nur langsam zu erreichen ist kann zu einem existenziellen Problem werden. Amazon hat das früh erkannt. Deshalb werden seit 2006 unter dem Namen Amazon Web Services (AWS) im großen Stil Rechenleistung und Services vermietet. Dadurch kann Amazon unter anderem saisonale Schwankungen besser ausgleichen und ist gleichzeitig besser gegen Ausfälle geschützt. Auch Sie können die AWS-Technik für Ihren Webshop nutzen. Wie das geht wollen wir Ihnen im Folgenden ausführlich darstellen.</p>\n\n<h2 id=\"anforderungen\">Anforderungen</h2>\n\n<h3 id=\"verfgbarkeit\">Verfügbarkeit</h3>\n\n<p>Ihr Webshop soll immer erreichbar sein. Unter dem Stichwort <em>High Availability (HA)</em> werden Maßnahmen zusammengefasst, die dazu dienen den Ausfall von einzelnen Komponenten aufzufangen. Zum Beispiel muss immer damit gerechnet werden, dass der Server auf dem Ihr Webshop betrieben wird einen technischen Defekt erleidet. Ein HA Setup läuft daher immer mindestens auf zwei Servern. Ein wenig subtiler aber weitaus gravierender sind Schäden die durch Umweltkatastrophen verursacht werden. Um dieses Szenario ohne Ausfall zu überstehen müssen Ihre Server an verschiedenen Standorten betrieben werden. AWS ermöglicht sowohl das Betreiben von mehreren Servern parallel als auch den Betrieb an verschiedenen Orten.</p>\n\n<h3 id=\"skalierbarkeit\">Skalierbarkeit</h3>\n\n<p>Ihr Webshop soll bei einem Besucheransturm nicht langamer werden. Egal ob Weihnachtsgeschäft, Wochenende oder einfach nur Mittagspause, die Besucherzahlen sind variieren teils stark. Sie müssen daher entwerder permanent Kapazitäten für die Lastspotzen bereithalten oder bei Bedarf Kapazität zuschalten. AWS vermietet Rechenleistung auf Stundenbasis, daher ist es möglich nach Bedarf die Leistung zu erhöhen oder abzusenken. Und das Ganze vollautomatisch.</p>\n\n<h2 id=\"bersichtderlsung\">Übersicht der Lösung</h2>\n\n<p><img src=\"http://cloudonauten.de/content/images/2015/01/HA-Webshop-Setup.png\" alt=\"\"></p>\n\n<h3 id=\"amazonroute53\">Amazon Route 53</h3>\n\n<p>Eine Anfrage an Ihren Webshop beginnt mit der Auflösung Ihrer Domain meinshop.de auf eine IP Adresse. Die Technik die für die Namensauflösung verwendet wird heißt DNS und wird vom Service Amazon Route 53 ausfallsicher bereitgestellt.</p>\n\n<h3 id=\"cloudfront\">CloudFront</h3>\n\n<p>Ein Content Delivery Network (CDN) reduziert die Ladezeit von statischen Dateien wie Bildern, CSS und JavaScript. An sogenannten <em>edge locations</em> wird eine Kopie Ihrer Dateien zwischengespeichert um bei Bedarf an Ihre Kunden ausgeliefert, ohne das erneut auf Ihre Server zugegriffen wird. Die Ladezeit für Ihren Webshop kann so deutlich verringert werden.</p>\n\n<h3 id=\"elasticloadbalancing\">Elastic Load Balancing</h3>\n\n<p>Ein Load Balancer verteilt Anfragen an Ihren Webshop auf mehrer Server. Sind mindestens zwei Server mit dem Load Balancer verbunden wird a) die Kapazität verdoppelt und b) werden Anfragen im Falle eines technischen Defektes an einem Server einfach an den noch verbleibenden Server umgeleitet.</p>\n\n<h3 id=\"amazonrds\">Amazon RDS</h3>\n\n<p>Ihr Webshop benötigt eine Datenbank wie MySQL oder PostgreSQL. Der Service Amazon RDS bietet hochverfügbare Datenbank-Cluster an, die Ihre Daten ausfallsicher und performant speichern und verarbeiten können.</p>\n\n<h3 id=\"elasticcache\">ElasticCache</h3>\n\n<p>Für Daten mit einer kurzen Lebenszeit, wie z.B. einer Session, reichen Cache-Server aus. Diese sind deutlich performater als Datenbanken und werden von AWS als ElasticCache Service angebunden. Dadurch wird die Ladezeit Ihres Webshops weiter reduziert.</p>\n\n<h2 id=\"fazit\">Fazit</h2>\n\n<p>Mit AWS können eCommerce-Anbieter von der IT-Infrastruktur profitieren, die Amazon für das eigene Geschäft aufgebaut hat. Das eröffnet neue Optionen, die auch ohne XXL Budget zu bewältigen sind. So lässt sich ein zuverlässiger Webshop betreiben, der auch bei großem Ansturm kurze Wartezeiten für die Kunden bieten kann.</p>","summary":"<p>Ein Webshop der zur Weihnachtszeit längere Zeit aufgrund von technischen Problemen nicht oder nur langsam zu erreichen ist kann zu einem existenziellen Problem werden. Amazon hat das früh erkannt. Deshalb werden seit 2006 unter dem Namen Amazon Web Services (AWS) im großen Stil Rechenleistung und Services vermietet. Dadurch kann Amazon unter anderem saisonale Schwankungen besser ausgleichen und ist gleichzeitig besser gegen Ausfälle geschützt. Auch Sie können die AWS-Technik für Ihren Webshop nutzen. Wie das geht wollen wir Ihnen im Folgenden ausführlich darstellen.</p>\n\n<h2 id=\"anforderungen\">Anforderungen</h2>\n\n<h3 id=\"verfgbarkeit\">Verfügbarkeit</h3>\n\n<p>Ihr Webshop soll immer erreichbar sein. Unter dem Stichwort <em>High Availability (HA)</em> werden Maßnahmen zusammengefasst, die dazu dienen den Ausfall von einzelnen Komponenten aufzufangen. Zum Beispiel muss immer damit gerechnet werden, dass der Server auf dem Ihr Webshop betrieben wird einen technischen Defekt erleidet. Ein HA Setup läuft daher immer mindestens auf zwei Servern. Ein wenig subtiler aber weitaus gravierender sind Schäden die durch Umweltkatastrophen verursacht werden. Um dieses Szenario ohne Ausfall zu überstehen müssen Ihre Server an verschiedenen Standorten betrieben werden. AWS ermöglicht sowohl das Betreiben von mehreren Servern parallel als auch den Betrieb an verschiedenen Orten.</p>\n\n<h3 id=\"skalierbarkeit\">Skalierbarkeit</h3>\n\n<p>Ihr Webshop soll bei einem Besucheransturm nicht langamer werden. Egal ob Weihnachtsgeschäft, Wochenende oder einfach nur Mittagspause, die Besucherzahlen sind variieren teils stark. Sie müssen daher entwerder permanent Kapazitäten für die Lastspotzen bereithalten oder bei Bedarf Kapazität zuschalten. AWS vermietet Rechenleistung auf Stundenbasis, daher ist es möglich nach Bedarf die Leistung zu erhöhen oder abzusenken. Und das Ganze vollautomatisch.</p>\n\n<h2 id=\"bersichtderlsung\">Übersicht der Lösung</h2>\n\n<p><img src=\"http://cloudonauten.de/content/images/2015/01/HA-Webshop-Setup.png\" alt=\"\"></p>\n\n<h3 id=\"amazonroute53\">Amazon Route 53</h3>\n\n<p>Eine Anfrage an Ihren Webshop beginnt mit der Auflösung Ihrer Domain meinshop.de auf eine IP Adresse. Die Technik die für die Namensauflösung verwendet wird heißt DNS und wird vom Service Amazon Route 53 ausfallsicher bereitgestellt.</p>\n\n<h3 id=\"cloudfront\">CloudFront</h3>\n\n<p>Ein Content Delivery Network (CDN) reduziert die Ladezeit von statischen Dateien wie Bildern, CSS und JavaScript. An sogenannten <em>edge locations</em> wird eine Kopie Ihrer Dateien zwischengespeichert um bei Bedarf an Ihre Kunden ausgeliefert, ohne das erneut auf Ihre Server zugegriffen wird. Die Ladezeit für Ihren Webshop kann so deutlich verringert werden.</p>\n\n<h3 id=\"elasticloadbalancing\">Elastic Load Balancing</h3>\n\n<p>Ein Load Balancer verteilt Anfragen an Ihren Webshop auf mehrer Server. Sind mindestens zwei Server mit dem Load Balancer verbunden wird a) die Kapazität verdoppelt und b) werden Anfragen im Falle eines technischen Defektes an einem Server einfach an den noch verbleibenden Server umgeleitet.</p>\n\n<h3 id=\"amazonrds\">Amazon RDS</h3>\n\n<p>Ihr Webshop benötigt eine Datenbank wie MySQL oder PostgreSQL. Der Service Amazon RDS bietet hochverfügbare Datenbank-Cluster an, die Ihre Daten ausfallsicher und performant speichern und verarbeiten können.</p>\n\n<h3 id=\"elasticcache\">ElasticCache</h3>\n\n<p>Für Daten mit einer kurzen Lebenszeit, wie z.B. einer Session, reichen Cache-Server aus. Diese sind deutlich performater als Datenbanken und werden von AWS als ElasticCache Service angebunden. Dadurch wird die Ladezeit Ihres Webshops weiter reduziert.</p>\n\n<h2 id=\"fazit\">Fazit</h2>\n\n<p>Mit AWS können eCommerce-Anbieter von der IT-Infrastruktur profitieren, die Amazon für das eigene Geschäft aufgebaut hat. Das eröffnet neue Optionen, die auch ohne XXL Budget zu bewältigen sind. So lässt sich ein zuverlässiger Webshop betreiben, der auch bei großem Ansturm kurze Wartezeiten für die Kunden bieten kann.</p>","date":"2015-01-28T09:20:00.000Z","pubdate":"2015-01-28T09:20:00.000Z","pubDate":"2015-01-28T09:20:00.000Z","link":"http://cloudonauten.de/hochverfuegbarkeit-fuer-webshops/","guid":"c3405751-8ef2-4c2e-9a49-37d9b920e47b","author":"Michael Wittig","comments":null,"origlink":null,"image":{},"source":{},"categories":["aws","Route 53","CloudFront","ELB","ElastiCache","RDS"],"enclosures":[],"rss:@":{},"rss:title":{"@":{},"#":"Hochverfügbarkeit für Webshops"},"rss:description":{"@":{},"#":"<p>Ein Webshop der zur Weihnachtszeit längere Zeit aufgrund von technischen Problemen nicht oder nur langsam zu erreichen ist kann zu einem existenziellen Problem werden. Amazon hat das früh erkannt. Deshalb werden seit 2006 unter dem Namen Amazon Web Services (AWS) im großen Stil Rechenleistung und Services vermietet. Dadurch kann Amazon unter anderem saisonale Schwankungen besser ausgleichen und ist gleichzeitig besser gegen Ausfälle geschützt. Auch Sie können die AWS-Technik für Ihren Webshop nutzen. Wie das geht wollen wir Ihnen im Folgenden ausführlich darstellen.</p>\n\n<h2 id=\"anforderungen\">Anforderungen</h2>\n\n<h3 id=\"verfgbarkeit\">Verfügbarkeit</h3>\n\n<p>Ihr Webshop soll immer erreichbar sein. Unter dem Stichwort <em>High Availability (HA)</em> werden Maßnahmen zusammengefasst, die dazu dienen den Ausfall von einzelnen Komponenten aufzufangen. Zum Beispiel muss immer damit gerechnet werden, dass der Server auf dem Ihr Webshop betrieben wird einen technischen Defekt erleidet. Ein HA Setup läuft daher immer mindestens auf zwei Servern. Ein wenig subtiler aber weitaus gravierender sind Schäden die durch Umweltkatastrophen verursacht werden. Um dieses Szenario ohne Ausfall zu überstehen müssen Ihre Server an verschiedenen Standorten betrieben werden. AWS ermöglicht sowohl das Betreiben von mehreren Servern parallel als auch den Betrieb an verschiedenen Orten.</p>\n\n<h3 id=\"skalierbarkeit\">Skalierbarkeit</h3>\n\n<p>Ihr Webshop soll bei einem Besucheransturm nicht langamer werden. Egal ob Weihnachtsgeschäft, Wochenende oder einfach nur Mittagspause, die Besucherzahlen sind variieren teils stark. Sie müssen daher entwerder permanent Kapazitäten für die Lastspotzen bereithalten oder bei Bedarf Kapazität zuschalten. AWS vermietet Rechenleistung auf Stundenbasis, daher ist es möglich nach Bedarf die Leistung zu erhöhen oder abzusenken. Und das Ganze vollautomatisch.</p>\n\n<h2 id=\"bersichtderlsung\">Übersicht der Lösung</h2>\n\n<p><img src=\"http://cloudonauten.de/content/images/2015/01/HA-Webshop-Setup.png\" alt=\"\"></p>\n\n<h3 id=\"amazonroute53\">Amazon Route 53</h3>\n\n<p>Eine Anfrage an Ihren Webshop beginnt mit der Auflösung Ihrer Domain meinshop.de auf eine IP Adresse. Die Technik die für die Namensauflösung verwendet wird heißt DNS und wird vom Service Amazon Route 53 ausfallsicher bereitgestellt.</p>\n\n<h3 id=\"cloudfront\">CloudFront</h3>\n\n<p>Ein Content Delivery Network (CDN) reduziert die Ladezeit von statischen Dateien wie Bildern, CSS und JavaScript. An sogenannten <em>edge locations</em> wird eine Kopie Ihrer Dateien zwischengespeichert um bei Bedarf an Ihre Kunden ausgeliefert, ohne das erneut auf Ihre Server zugegriffen wird. Die Ladezeit für Ihren Webshop kann so deutlich verringert werden.</p>\n\n<h3 id=\"elasticloadbalancing\">Elastic Load Balancing</h3>\n\n<p>Ein Load Balancer verteilt Anfragen an Ihren Webshop auf mehrer Server. Sind mindestens zwei Server mit dem Load Balancer verbunden wird a) die Kapazität verdoppelt und b) werden Anfragen im Falle eines technischen Defektes an einem Server einfach an den noch verbleibenden Server umgeleitet.</p>\n\n<h3 id=\"amazonrds\">Amazon RDS</h3>\n\n<p>Ihr Webshop benötigt eine Datenbank wie MySQL oder PostgreSQL. Der Service Amazon RDS bietet hochverfügbare Datenbank-Cluster an, die Ihre Daten ausfallsicher und performant speichern und verarbeiten können.</p>\n\n<h3 id=\"elasticcache\">ElasticCache</h3>\n\n<p>Für Daten mit einer kurzen Lebenszeit, wie z.B. einer Session, reichen Cache-Server aus. Diese sind deutlich performater als Datenbanken und werden von AWS als ElasticCache Service angebunden. Dadurch wird die Ladezeit Ihres Webshops weiter reduziert.</p>\n\n<h2 id=\"fazit\">Fazit</h2>\n\n<p>Mit AWS können eCommerce-Anbieter von der IT-Infrastruktur profitieren, die Amazon für das eigene Geschäft aufgebaut hat. Das eröffnet neue Optionen, die auch ohne XXL Budget zu bewältigen sind. So lässt sich ein zuverlässiger Webshop betreiben, der auch bei großem Ansturm kurze Wartezeiten für die Kunden bieten kann.</p>"},"rss:link":{"@":{},"#":"http://cloudonauten.de/hochverfuegbarkeit-fuer-webshops/"},"rss:guid":{"@":{"ispermalink":"false"},"#":"c3405751-8ef2-4c2e-9a49-37d9b920e47b"},"rss:category":[{"@":{},"#":"aws"},{"@":{},"#":"Route 53"},{"@":{},"#":"CloudFront"},{"@":{},"#":"ELB"},{"@":{},"#":"ElastiCache"},{"@":{},"#":"RDS"}],"dc:creator":{"@":{},"#":"Michael Wittig"},"rss:pubdate":{"@":{},"#":"Wed, 28 Jan 2015 09:20:00 GMT"},"meta":{"#ns":[{"xmlns:dc":"http://purl.org/dc/elements/1.1/"},{"xmlns:content":"http://purl.org/rss/1.0/modules/content/"},{"xmlns:atom":"http://www.w3.org/2005/Atom"}],"@":[{"xmlns:dc":"http://purl.org/dc/elements/1.1/"},{"xmlns:content":"http://purl.org/rss/1.0/modules/content/"},{"xmlns:atom":"http://www.w3.org/2005/Atom"}],"#xml":{"version":"1.0","encoding":"UTF-8"},"#type":"rss","#version":"2.0","title":"cloudonauten","description":"Cloud Computing im Allgemeinen und AWS im Speziellen.","date":"2015-05-06T12:50:22.000Z","pubdate":"2015-05-06T12:50:22.000Z","pubDate":"2015-05-06T12:50:22.000Z","link":"http://cloudonauten.de/","xmlurl":"http://cloudonauten.de/rss/","xmlUrl":"http://cloudonauten.de/rss/","author":null,"language":null,"favicon":null,"copyright":null,"generator":"Ghost 0.5","cloud":{},"image":{},"categories":[],"rss:@":{},"rss:title":{"@":{},"#":"cloudonauten"},"rss:description":{"@":{},"#":"Cloud Computing im Allgemeinen und AWS im Speziellen."},"rss:link":{"@":{},"#":"http://cloudonauten.de/"},"rss:generator":{"@":{},"#":"Ghost 0.5"},"rss:lastbuilddate":{"@":{},"#":"Wed, 06 May 2015 12:50:22 GMT"},"atom:link":{"@":{"href":"http://cloudonauten.de/rss/","rel":"self","type":"application/rss+xml"}},"rss:ttl":{"@":{},"#":"60"}}},{"title":"Konfigurationsverwaltung für die Cloud","description":"<p>Per Mausklick kann man bei AWS zum Beispiel einen virtuellen Server (EC2) starten, die Firewall (SecurityGroup) ändern oder auch einen DNS-Eintrag (Route53) setzen. Für den Einstieg ist die Weboberfläche (AWS Management Console) scheinbar perfekt geeignet. Alles funktioniert einfach und schnell. Aber wenn das Setup wächst und wächst, Mitarbeiter wechseln oder nach Monaten nochmal Änderungen vorgenommen werden müssen führt das schnell zu Kopfschmerzen.</p>\n\n<h2 id=\"hufigeprobleme\">Häufige Probleme</h2>\n\n<ul>\n<li>Bei Änderungen an der Konfiguration kommt es zu Fehlern, die den Produktivbetrieb stören.</li>\n<li>Bereitstellung neuer Ressourcen erfordert hohen manuellen Aufwand.</li>\n<li>Bei Sicherheitslücken ist nicht klar, an welchen Stellen ein Update erforderlich ist.</li>\n<li>Fehler fallen in der Testumgebung nicht auf, weil sich diese zu stark von der Produktivumgebung unterscheidet.</li>\n<li>Dokumentation und Realität passen nicht 100%ig zueinander.</li>\n</ul>\n\n<h2 id=\"lsung\">Lösung</h2>\n\n<p>Die oben beschriebenen Probleme lassen sich mit einer Konfigurationsverwaltung lösen, die perfekt an die Anforderungen der Cloud angepasst ist. Für AWS heißt diese Lösung <em>CloudFormation</em>. Das zugrundeliegende Prinzip heißt <em>Infrastructure as Code</em>. AWS lässt sich nicht nur per Weboberfläche konfigurieren, sondern die Konfiguration kann auch in Form von Code (JSON) abgelegt werden. Mit <em>CloudFormation</em> lässt sich dieser Code dann ausführen und die Konfiguration anwenden.</p>\n\n<p>Das hat verschiedene Vorteile.</p>\n\n<ul>\n<li>Wissen wandert aus dem Kopf der Mitarbeiter in Code und ist damit dokumentiert und standardisiert.</li>\n<li>Die Konfiguration lässt sich automatisiert und ohne manuellen Aufwand auf verschiedene Umgebungen anwenden (z.B. Test- und Produktivumgebung).</li>\n<li>Die Dokumentation erfolgt nicht in separaten System sondern direkt dort, wo die Konfiguration selbst stattfindet.</li>\n<li>Die Anwendung von Änderungen ist ohne großen Aufwand über AWS Regionen und Konten hinweg möglich.</li>\n<li>Der Code (Vorlage) wird 1:1 in Konfiguration der AWS Ressourcen übersetzt.</li>\n<li>Peer-Review von Änderungen an Konfiguration zur Qualitätssicherung wird möglich.</li>\n<li>Änderungen an Konfiguration werden archiviert und nachvollziehbar.</li>\n</ul>\n\n<h2 id=\"prozess\">Prozess</h2>\n\n<p>Wie sich <em>Infrastructure as Code</em> in einem Prozess umsetzen lässt zeigt das folgende Schaubild.</p>\n\n<p><img src=\"http://cloudonauten.de/content/images/2015/01/InfrastructureAsCode-1.png\" alt=\"Prozess für Infrastructure as Code\"></p>\n\n<p>Dank der AWS API lässt sich der Prozess einfach mit einem Continuous Integration Server (z.B. Jenkins) standardisieren.</p>\n\n<h2 id=\"fazit\">Fazit</h2>\n\n<p>In der Cloud eröffnen sich auf im Hinblick auf das Thema Konfigurationsverwaltung neue Möglichkeiten. Mit <em>Infrastructure as Code</em> lassen sich Prozesse im IT-Management neu gestalten. Die Wart- und testbarkeit von Systemen kann so gesteigert werden.</p>","summary":"<p>Per Mausklick kann man bei AWS zum Beispiel einen virtuellen Server (EC2) starten, die Firewall (SecurityGroup) ändern oder auch einen DNS-Eintrag (Route53) setzen. Für den Einstieg ist die Weboberfläche (AWS Management Console) scheinbar perfekt geeignet. Alles funktioniert einfach und schnell. Aber wenn das Setup wächst und wächst, Mitarbeiter wechseln oder nach Monaten nochmal Änderungen vorgenommen werden müssen führt das schnell zu Kopfschmerzen.</p>\n\n<h2 id=\"hufigeprobleme\">Häufige Probleme</h2>\n\n<ul>\n<li>Bei Änderungen an der Konfiguration kommt es zu Fehlern, die den Produktivbetrieb stören.</li>\n<li>Bereitstellung neuer Ressourcen erfordert hohen manuellen Aufwand.</li>\n<li>Bei Sicherheitslücken ist nicht klar, an welchen Stellen ein Update erforderlich ist.</li>\n<li>Fehler fallen in der Testumgebung nicht auf, weil sich diese zu stark von der Produktivumgebung unterscheidet.</li>\n<li>Dokumentation und Realität passen nicht 100%ig zueinander.</li>\n</ul>\n\n<h2 id=\"lsung\">Lösung</h2>\n\n<p>Die oben beschriebenen Probleme lassen sich mit einer Konfigurationsverwaltung lösen, die perfekt an die Anforderungen der Cloud angepasst ist. Für AWS heißt diese Lösung <em>CloudFormation</em>. Das zugrundeliegende Prinzip heißt <em>Infrastructure as Code</em>. AWS lässt sich nicht nur per Weboberfläche konfigurieren, sondern die Konfiguration kann auch in Form von Code (JSON) abgelegt werden. Mit <em>CloudFormation</em> lässt sich dieser Code dann ausführen und die Konfiguration anwenden.</p>\n\n<p>Das hat verschiedene Vorteile.</p>\n\n<ul>\n<li>Wissen wandert aus dem Kopf der Mitarbeiter in Code und ist damit dokumentiert und standardisiert.</li>\n<li>Die Konfiguration lässt sich automatisiert und ohne manuellen Aufwand auf verschiedene Umgebungen anwenden (z.B. Test- und Produktivumgebung).</li>\n<li>Die Dokumentation erfolgt nicht in separaten System sondern direkt dort, wo die Konfiguration selbst stattfindet.</li>\n<li>Die Anwendung von Änderungen ist ohne großen Aufwand über AWS Regionen und Konten hinweg möglich.</li>\n<li>Der Code (Vorlage) wird 1:1 in Konfiguration der AWS Ressourcen übersetzt.</li>\n<li>Peer-Review von Änderungen an Konfiguration zur Qualitätssicherung wird möglich.</li>\n<li>Änderungen an Konfiguration werden archiviert und nachvollziehbar.</li>\n</ul>\n\n<h2 id=\"prozess\">Prozess</h2>\n\n<p>Wie sich <em>Infrastructure as Code</em> in einem Prozess umsetzen lässt zeigt das folgende Schaubild.</p>\n\n<p><img src=\"http://cloudonauten.de/content/images/2015/01/InfrastructureAsCode-1.png\" alt=\"Prozess für Infrastructure as Code\"></p>\n\n<p>Dank der AWS API lässt sich der Prozess einfach mit einem Continuous Integration Server (z.B. Jenkins) standardisieren.</p>\n\n<h2 id=\"fazit\">Fazit</h2>\n\n<p>In der Cloud eröffnen sich auf im Hinblick auf das Thema Konfigurationsverwaltung neue Möglichkeiten. Mit <em>Infrastructure as Code</em> lassen sich Prozesse im IT-Management neu gestalten. Die Wart- und testbarkeit von Systemen kann so gesteigert werden.</p>","date":"2015-01-26T11:38:00.000Z","pubdate":"2015-01-26T11:38:00.000Z","pubDate":"2015-01-26T11:38:00.000Z","link":"http://cloudonauten.de/konfigurationsverwaltung-fur-die-cloud/","guid":"4d37edfb-7edb-4ea9-a818-b3f8a602b94d","author":"Andreas Wittig","comments":null,"origlink":null,"image":{},"source":{},"categories":["konfigurationsverwaltung"],"enclosures":[],"rss:@":{},"rss:title":{"@":{},"#":"Konfigurationsverwaltung für die Cloud"},"rss:description":{"@":{},"#":"<p>Per Mausklick kann man bei AWS zum Beispiel einen virtuellen Server (EC2) starten, die Firewall (SecurityGroup) ändern oder auch einen DNS-Eintrag (Route53) setzen. Für den Einstieg ist die Weboberfläche (AWS Management Console) scheinbar perfekt geeignet. Alles funktioniert einfach und schnell. Aber wenn das Setup wächst und wächst, Mitarbeiter wechseln oder nach Monaten nochmal Änderungen vorgenommen werden müssen führt das schnell zu Kopfschmerzen.</p>\n\n<h2 id=\"hufigeprobleme\">Häufige Probleme</h2>\n\n<ul>\n<li>Bei Änderungen an der Konfiguration kommt es zu Fehlern, die den Produktivbetrieb stören.</li>\n<li>Bereitstellung neuer Ressourcen erfordert hohen manuellen Aufwand.</li>\n<li>Bei Sicherheitslücken ist nicht klar, an welchen Stellen ein Update erforderlich ist.</li>\n<li>Fehler fallen in der Testumgebung nicht auf, weil sich diese zu stark von der Produktivumgebung unterscheidet.</li>\n<li>Dokumentation und Realität passen nicht 100%ig zueinander.</li>\n</ul>\n\n<h2 id=\"lsung\">Lösung</h2>\n\n<p>Die oben beschriebenen Probleme lassen sich mit einer Konfigurationsverwaltung lösen, die perfekt an die Anforderungen der Cloud angepasst ist. Für AWS heißt diese Lösung <em>CloudFormation</em>. Das zugrundeliegende Prinzip heißt <em>Infrastructure as Code</em>. AWS lässt sich nicht nur per Weboberfläche konfigurieren, sondern die Konfiguration kann auch in Form von Code (JSON) abgelegt werden. Mit <em>CloudFormation</em> lässt sich dieser Code dann ausführen und die Konfiguration anwenden.</p>\n\n<p>Das hat verschiedene Vorteile.</p>\n\n<ul>\n<li>Wissen wandert aus dem Kopf der Mitarbeiter in Code und ist damit dokumentiert und standardisiert.</li>\n<li>Die Konfiguration lässt sich automatisiert und ohne manuellen Aufwand auf verschiedene Umgebungen anwenden (z.B. Test- und Produktivumgebung).</li>\n<li>Die Dokumentation erfolgt nicht in separaten System sondern direkt dort, wo die Konfiguration selbst stattfindet.</li>\n<li>Die Anwendung von Änderungen ist ohne großen Aufwand über AWS Regionen und Konten hinweg möglich.</li>\n<li>Der Code (Vorlage) wird 1:1 in Konfiguration der AWS Ressourcen übersetzt.</li>\n<li>Peer-Review von Änderungen an Konfiguration zur Qualitätssicherung wird möglich.</li>\n<li>Änderungen an Konfiguration werden archiviert und nachvollziehbar.</li>\n</ul>\n\n<h2 id=\"prozess\">Prozess</h2>\n\n<p>Wie sich <em>Infrastructure as Code</em> in einem Prozess umsetzen lässt zeigt das folgende Schaubild.</p>\n\n<p><img src=\"http://cloudonauten.de/content/images/2015/01/InfrastructureAsCode-1.png\" alt=\"Prozess für Infrastructure as Code\"></p>\n\n<p>Dank der AWS API lässt sich der Prozess einfach mit einem Continuous Integration Server (z.B. Jenkins) standardisieren.</p>\n\n<h2 id=\"fazit\">Fazit</h2>\n\n<p>In der Cloud eröffnen sich auf im Hinblick auf das Thema Konfigurationsverwaltung neue Möglichkeiten. Mit <em>Infrastructure as Code</em> lassen sich Prozesse im IT-Management neu gestalten. Die Wart- und testbarkeit von Systemen kann so gesteigert werden.</p>"},"rss:link":{"@":{},"#":"http://cloudonauten.de/konfigurationsverwaltung-fur-die-cloud/"},"rss:guid":{"@":{"ispermalink":"false"},"#":"4d37edfb-7edb-4ea9-a818-b3f8a602b94d"},"rss:category":{"@":{},"#":"konfigurationsverwaltung"},"dc:creator":{"@":{},"#":"Andreas Wittig"},"rss:pubdate":{"@":{},"#":"Mon, 26 Jan 2015 11:38:00 GMT"},"meta":{"#ns":[{"xmlns:dc":"http://purl.org/dc/elements/1.1/"},{"xmlns:content":"http://purl.org/rss/1.0/modules/content/"},{"xmlns:atom":"http://www.w3.org/2005/Atom"}],"@":[{"xmlns:dc":"http://purl.org/dc/elements/1.1/"},{"xmlns:content":"http://purl.org/rss/1.0/modules/content/"},{"xmlns:atom":"http://www.w3.org/2005/Atom"}],"#xml":{"version":"1.0","encoding":"UTF-8"},"#type":"rss","#version":"2.0","title":"cloudonauten","description":"Cloud Computing im Allgemeinen und AWS im Speziellen.","date":"2015-05-06T12:50:22.000Z","pubdate":"2015-05-06T12:50:22.000Z","pubDate":"2015-05-06T12:50:22.000Z","link":"http://cloudonauten.de/","xmlurl":"http://cloudonauten.de/rss/","xmlUrl":"http://cloudonauten.de/rss/","author":null,"language":null,"favicon":null,"copyright":null,"generator":"Ghost 0.5","cloud":{},"image":{},"categories":[],"rss:@":{},"rss:title":{"@":{},"#":"cloudonauten"},"rss:description":{"@":{},"#":"Cloud Computing im Allgemeinen und AWS im Speziellen."},"rss:link":{"@":{},"#":"http://cloudonauten.de/"},"rss:generator":{"@":{},"#":"Ghost 0.5"},"rss:lastbuilddate":{"@":{},"#":"Wed, 06 May 2015 12:50:22 GMT"},"atom:link":{"@":{"href":"http://cloudonauten.de/rss/","rel":"self","type":"application/rss+xml"}},"rss:ttl":{"@":{},"#":"60"}}},{"title":"Daten verteilen mit GlusterFS","description":"<p>Um die Möglichkeiten der Cloud voll ausschöpfen zu können, sollte auf einen Server (z.B. EC2 Instanz) kein Zustand gespeichert werden. Verlagert man den Zustand vom Server in Speichersysteme wie zum Beispiel S3, DynamoDB, RDS oder ElastiCache kann man von automatischer Skalierung bei Last oder von erhöhter Ausfallsicherheit in der Cloud profitieren.</p>\n\n<p>Aber was tun, wenn die Blog- oder eCommerce-Software die Grafik- und Video-Dateien direkt auf der Festplatte des Servers speichert und eine Anpassung an der Software zeitaufwändig und unrentabel ist? Mit einem verteilten Speichersystem wie <a href=\"http://www.gluster.org/\">GlusterFS</a> lässt sich dieses Problem umgehen. Das verteilte Speichersytem sorgt dafür, dass Daten zuverlässig auf alle Server verteilt werden.</p>\n\n<p>GlusterFS kann immer dann verwendet werden, wenn Schreibzugriffe auf verschiedene Ordner und Dateien verteilt stattfinden. Im oben genannten Szenario mit einer Blog- oder eCommerce-Software, die Media-Dateien abspeichert kann GlusterFS problemlos verwendet werden. Problematisch wird es allerdings, wenn zum Beispiel die Logdateien verteilt werden sollen. Wenn mehrere Server auf die gleiche Datei in einem GlusterFS-Laufwerk schreiben kommt es zu Problemen mit der Performance. Die technische Dokumentation enthält Details zu <a href=\"https://s3.amazonaws.com/aws001/guided_trek/Performance_in_a_Gluster_Systemv6F.pdf\">Performance</a> und <a href=\"http://moo.nac.uci.edu/~hjm/fs/An_Introduction_To_Gluster_ArchitectureV7_110708.pdf\">Architektur</a>.</p>\n\n<p>Für ein Testsetup auf Basis von AWS stelle ich gerne mein CloudFormation-Template als <em>Hello World</em>-Beispiel bereit: <a href=\"https://bitbucket.org/widdix/de.widdix.lab.glusterfs\">bitbucket.org/widdix/de.widdix.lab.glusterfs</a>. Das CloudFormation-Template startet zwei EC2-Instanzen in einem eigenen VPC. Änderungen im  Ordner <em>/mnt/labvolume</em> werden automatisch zwischen den beiden Servern verteilt. Viel Spaß beim Ausprobieren!</p>","summary":"<p>Um die Möglichkeiten der Cloud voll ausschöpfen zu können, sollte auf einen Server (z.B. EC2 Instanz) kein Zustand gespeichert werden. Verlagert man den Zustand vom Server in Speichersysteme wie zum Beispiel S3, DynamoDB, RDS oder ElastiCache kann man von automatischer Skalierung bei Last oder von erhöhter Ausfallsicherheit in der Cloud profitieren.</p>\n\n<p>Aber was tun, wenn die Blog- oder eCommerce-Software die Grafik- und Video-Dateien direkt auf der Festplatte des Servers speichert und eine Anpassung an der Software zeitaufwändig und unrentabel ist? Mit einem verteilten Speichersystem wie <a href=\"http://www.gluster.org/\">GlusterFS</a> lässt sich dieses Problem umgehen. Das verteilte Speichersytem sorgt dafür, dass Daten zuverlässig auf alle Server verteilt werden.</p>\n\n<p>GlusterFS kann immer dann verwendet werden, wenn Schreibzugriffe auf verschiedene Ordner und Dateien verteilt stattfinden. Im oben genannten Szenario mit einer Blog- oder eCommerce-Software, die Media-Dateien abspeichert kann GlusterFS problemlos verwendet werden. Problematisch wird es allerdings, wenn zum Beispiel die Logdateien verteilt werden sollen. Wenn mehrere Server auf die gleiche Datei in einem GlusterFS-Laufwerk schreiben kommt es zu Problemen mit der Performance. Die technische Dokumentation enthält Details zu <a href=\"https://s3.amazonaws.com/aws001/guided_trek/Performance_in_a_Gluster_Systemv6F.pdf\">Performance</a> und <a href=\"http://moo.nac.uci.edu/~hjm/fs/An_Introduction_To_Gluster_ArchitectureV7_110708.pdf\">Architektur</a>.</p>\n\n<p>Für ein Testsetup auf Basis von AWS stelle ich gerne mein CloudFormation-Template als <em>Hello World</em>-Beispiel bereit: <a href=\"https://bitbucket.org/widdix/de.widdix.lab.glusterfs\">bitbucket.org/widdix/de.widdix.lab.glusterfs</a>. Das CloudFormation-Template startet zwei EC2-Instanzen in einem eigenen VPC. Änderungen im  Ordner <em>/mnt/labvolume</em> werden automatisch zwischen den beiden Servern verteilt. Viel Spaß beim Ausprobieren!</p>","date":"2015-01-23T15:55:52.000Z","pubdate":"2015-01-23T15:55:52.000Z","pubDate":"2015-01-23T15:55:52.000Z","link":"http://cloudonauten.de/daten-verteilen-mit-glusterfs/","guid":"5b0231c1-31c5-49d1-9646-d73a51ff4ee7","author":"Andreas Wittig","comments":null,"origlink":null,"image":{},"source":{},"categories":["aws","CloudFormation","GlusterFS"],"enclosures":[],"rss:@":{},"rss:title":{"@":{},"#":"Daten verteilen mit GlusterFS"},"rss:description":{"@":{},"#":"<p>Um die Möglichkeiten der Cloud voll ausschöpfen zu können, sollte auf einen Server (z.B. EC2 Instanz) kein Zustand gespeichert werden. Verlagert man den Zustand vom Server in Speichersysteme wie zum Beispiel S3, DynamoDB, RDS oder ElastiCache kann man von automatischer Skalierung bei Last oder von erhöhter Ausfallsicherheit in der Cloud profitieren.</p>\n\n<p>Aber was tun, wenn die Blog- oder eCommerce-Software die Grafik- und Video-Dateien direkt auf der Festplatte des Servers speichert und eine Anpassung an der Software zeitaufwändig und unrentabel ist? Mit einem verteilten Speichersystem wie <a href=\"http://www.gluster.org/\">GlusterFS</a> lässt sich dieses Problem umgehen. Das verteilte Speichersytem sorgt dafür, dass Daten zuverlässig auf alle Server verteilt werden.</p>\n\n<p>GlusterFS kann immer dann verwendet werden, wenn Schreibzugriffe auf verschiedene Ordner und Dateien verteilt stattfinden. Im oben genannten Szenario mit einer Blog- oder eCommerce-Software, die Media-Dateien abspeichert kann GlusterFS problemlos verwendet werden. Problematisch wird es allerdings, wenn zum Beispiel die Logdateien verteilt werden sollen. Wenn mehrere Server auf die gleiche Datei in einem GlusterFS-Laufwerk schreiben kommt es zu Problemen mit der Performance. Die technische Dokumentation enthält Details zu <a href=\"https://s3.amazonaws.com/aws001/guided_trek/Performance_in_a_Gluster_Systemv6F.pdf\">Performance</a> und <a href=\"http://moo.nac.uci.edu/~hjm/fs/An_Introduction_To_Gluster_ArchitectureV7_110708.pdf\">Architektur</a>.</p>\n\n<p>Für ein Testsetup auf Basis von AWS stelle ich gerne mein CloudFormation-Template als <em>Hello World</em>-Beispiel bereit: <a href=\"https://bitbucket.org/widdix/de.widdix.lab.glusterfs\">bitbucket.org/widdix/de.widdix.lab.glusterfs</a>. Das CloudFormation-Template startet zwei EC2-Instanzen in einem eigenen VPC. Änderungen im  Ordner <em>/mnt/labvolume</em> werden automatisch zwischen den beiden Servern verteilt. Viel Spaß beim Ausprobieren!</p>"},"rss:link":{"@":{},"#":"http://cloudonauten.de/daten-verteilen-mit-glusterfs/"},"rss:guid":{"@":{"ispermalink":"false"},"#":"5b0231c1-31c5-49d1-9646-d73a51ff4ee7"},"rss:category":[{"@":{},"#":"aws"},{"@":{},"#":"CloudFormation"},{"@":{},"#":"GlusterFS"}],"dc:creator":{"@":{},"#":"Andreas Wittig"},"rss:pubdate":{"@":{},"#":"Fri, 23 Jan 2015 15:55:52 GMT"},"meta":{"#ns":[{"xmlns:dc":"http://purl.org/dc/elements/1.1/"},{"xmlns:content":"http://purl.org/rss/1.0/modules/content/"},{"xmlns:atom":"http://www.w3.org/2005/Atom"}],"@":[{"xmlns:dc":"http://purl.org/dc/elements/1.1/"},{"xmlns:content":"http://purl.org/rss/1.0/modules/content/"},{"xmlns:atom":"http://www.w3.org/2005/Atom"}],"#xml":{"version":"1.0","encoding":"UTF-8"},"#type":"rss","#version":"2.0","title":"cloudonauten","description":"Cloud Computing im Allgemeinen und AWS im Speziellen.","date":"2015-05-06T12:50:22.000Z","pubdate":"2015-05-06T12:50:22.000Z","pubDate":"2015-05-06T12:50:22.000Z","link":"http://cloudonauten.de/","xmlurl":"http://cloudonauten.de/rss/","xmlUrl":"http://cloudonauten.de/rss/","author":null,"language":null,"favicon":null,"copyright":null,"generator":"Ghost 0.5","cloud":{},"image":{},"categories":[],"rss:@":{},"rss:title":{"@":{},"#":"cloudonauten"},"rss:description":{"@":{},"#":"Cloud Computing im Allgemeinen und AWS im Speziellen."},"rss:link":{"@":{},"#":"http://cloudonauten.de/"},"rss:generator":{"@":{},"#":"Ghost 0.5"},"rss:lastbuilddate":{"@":{},"#":"Wed, 06 May 2015 12:50:22 GMT"},"atom:link":{"@":{"href":"http://cloudonauten.de/rss/","rel":"self","type":"application/rss+xml"}},"rss:ttl":{"@":{},"#":"60"}}},{"title":"Migration eu-west-1 nach eu-central-1","description":"<p>Die Cloud ist in Deutschland angekommen. Seit dem 23. Oktober 2014 ist Amazon Web Services (AWS) auch mit Rechenzentren, der Region eu-central-1, in Deutschland (Frankfurt) vertreten. Bisher war Irland der einzige Standort von AWS in Europa. Wenn Sie Dienste bei AWS in Irland betreiben, sollten Sie über eine Migration nach Deutschland (Frankfurt) nachdenken.</p>\n\n<h2 id=\"grndefreucentral1\">Gründe für eu-central-1</h2>\n\n<ul>\n<li><strong>Datenverarbeitung in Deutschland</strong> Die Auslagerung von IT-Infrastuktur war mit dem AWS Standort in Irland bereits mit den deutschen und europäischen Richtlinien bzgl. Datenschutz vereinbar. Mit eu-central-1 kann jetzt auch garantiert werden, dass die Datenverarbeitung innerhalb von Deutschland durchgeführt wird.</li>\n<li><strong>Schneller beim Kunden</strong> Mit AWS in Frankfurt wird der digitale Weg zu Ihren Kunden in Deutschland und auf dem europäischen Festland noch kürzer. Eine Anfrage an Ihren Webserver in Frankfurt hat zum Beispiel aus Stuttgart eine Verzögerung von 10 ms. Eine Verbindung nach Irland hingegen hat eine Verzögerung von 32 ms.</li>\n</ul>\n\n<h2 id=\"problemeundlsungen\">Probleme und Lösungen</h2>\n\n<h3 id=\"infrastruktur\">Infrastruktur</h3>\n\n<p>Die Migration von einem typischen AWS Setup (z.B. Web-Applikation) besteht schnell aus 100 einzelnen Ressourcen, deren Zusammenspiel perfekt aufeinander abgestimmt ist. Betroffen sind Zugriffsregeln im Netzwerk (ACLs und SecurityGroups) und für AWS Ressourcen (IAM). Und auch Ressourcen wie S3, Route53 und CloudWatch müssen mit EC2 und Co. verknüpft werden. Dazu kommen Autoscaling, RDS, ElastiCache und vieles mehr. Bei der Migration muss das komplette Setup der Infrastruktur mit all seinen Abhängigkeiten übertragen werden. Eine große Herausforderung, die sich am Besten durch die Methode \"Infastructure as Code\" meistern lässt. Mit AWS lässt sich das unter anderem durch die Verwendung von CloudFormation umsetzen. Das komplette Setup wird dabei halbautomatisch in ein Template übertragen. Dieses Template kann dann zum Beispiel in der AWS Region eu-central-1 in Deutschland (Frankfurt) automatisiert und zuverlässig eingespielt werden.</p>\n\n<h3 id=\"daten\">Daten</h3>\n\n<p>Neben der Infrastruktur müssen auch die Daten von Irland nach Deutschland transferiert werden. Daten aus Datenbanken (RDS, DynamoDB, ElastiCache) und anderen Datenspeichern (S3, EBS) müssen synchronisiert werden. Je nach Umfang und Art der Daten eine mittlere bis größere Herausforderung. Da AWS Services in der Regel so konzipiert sind, dass sie Daten nur in einer Region ablegen. Für den Transfer der Daten müssen also Lösungen gefunden werden. Für RDS Datenbanken ist ein Transfer der Daten mit einem Cross-Region-Read-Replica-Setup möglich. EBS Laufwerke lassen sich mit einer Snapshot-Kopie von Irland nach Deutschland übertragen. Auch für alle anderen Datenspeicher gibt es automatisierte oder halbautomatisierte Methoden für den Datentransfer.</p>\n\n<h2 id=\"zusammenfassung\">Zusammenfassung</h2>\n\n<p>Die neue Region eu-central-1 ist eine spannende Option für den europäischen Markt. Eine Migration sollte - enstprechende Planung und Vorbereitung vorausgesetzt - problemlos möglich sein. An dieser Stelle noch der Hinweis auf einige kleineren <br>\n <a href=\"http://cloudonauten.de/stolpersteine-auf-dem-weg-nach-eu-central-1/\">Stolpersteine auf dem Weg nach eu-central-1</a>.</p>","summary":"<p>Die Cloud ist in Deutschland angekommen. Seit dem 23. Oktober 2014 ist Amazon Web Services (AWS) auch mit Rechenzentren, der Region eu-central-1, in Deutschland (Frankfurt) vertreten. Bisher war Irland der einzige Standort von AWS in Europa. Wenn Sie Dienste bei AWS in Irland betreiben, sollten Sie über eine Migration nach Deutschland (Frankfurt) nachdenken.</p>\n\n<h2 id=\"grndefreucentral1\">Gründe für eu-central-1</h2>\n\n<ul>\n<li><strong>Datenverarbeitung in Deutschland</strong> Die Auslagerung von IT-Infrastuktur war mit dem AWS Standort in Irland bereits mit den deutschen und europäischen Richtlinien bzgl. Datenschutz vereinbar. Mit eu-central-1 kann jetzt auch garantiert werden, dass die Datenverarbeitung innerhalb von Deutschland durchgeführt wird.</li>\n<li><strong>Schneller beim Kunden</strong> Mit AWS in Frankfurt wird der digitale Weg zu Ihren Kunden in Deutschland und auf dem europäischen Festland noch kürzer. Eine Anfrage an Ihren Webserver in Frankfurt hat zum Beispiel aus Stuttgart eine Verzögerung von 10 ms. Eine Verbindung nach Irland hingegen hat eine Verzögerung von 32 ms.</li>\n</ul>\n\n<h2 id=\"problemeundlsungen\">Probleme und Lösungen</h2>\n\n<h3 id=\"infrastruktur\">Infrastruktur</h3>\n\n<p>Die Migration von einem typischen AWS Setup (z.B. Web-Applikation) besteht schnell aus 100 einzelnen Ressourcen, deren Zusammenspiel perfekt aufeinander abgestimmt ist. Betroffen sind Zugriffsregeln im Netzwerk (ACLs und SecurityGroups) und für AWS Ressourcen (IAM). Und auch Ressourcen wie S3, Route53 und CloudWatch müssen mit EC2 und Co. verknüpft werden. Dazu kommen Autoscaling, RDS, ElastiCache und vieles mehr. Bei der Migration muss das komplette Setup der Infrastruktur mit all seinen Abhängigkeiten übertragen werden. Eine große Herausforderung, die sich am Besten durch die Methode \"Infastructure as Code\" meistern lässt. Mit AWS lässt sich das unter anderem durch die Verwendung von CloudFormation umsetzen. Das komplette Setup wird dabei halbautomatisch in ein Template übertragen. Dieses Template kann dann zum Beispiel in der AWS Region eu-central-1 in Deutschland (Frankfurt) automatisiert und zuverlässig eingespielt werden.</p>\n\n<h3 id=\"daten\">Daten</h3>\n\n<p>Neben der Infrastruktur müssen auch die Daten von Irland nach Deutschland transferiert werden. Daten aus Datenbanken (RDS, DynamoDB, ElastiCache) und anderen Datenspeichern (S3, EBS) müssen synchronisiert werden. Je nach Umfang und Art der Daten eine mittlere bis größere Herausforderung. Da AWS Services in der Regel so konzipiert sind, dass sie Daten nur in einer Region ablegen. Für den Transfer der Daten müssen also Lösungen gefunden werden. Für RDS Datenbanken ist ein Transfer der Daten mit einem Cross-Region-Read-Replica-Setup möglich. EBS Laufwerke lassen sich mit einer Snapshot-Kopie von Irland nach Deutschland übertragen. Auch für alle anderen Datenspeicher gibt es automatisierte oder halbautomatisierte Methoden für den Datentransfer.</p>\n\n<h2 id=\"zusammenfassung\">Zusammenfassung</h2>\n\n<p>Die neue Region eu-central-1 ist eine spannende Option für den europäischen Markt. Eine Migration sollte - enstprechende Planung und Vorbereitung vorausgesetzt - problemlos möglich sein. An dieser Stelle noch der Hinweis auf einige kleineren <br>\n <a href=\"http://cloudonauten.de/stolpersteine-auf-dem-weg-nach-eu-central-1/\">Stolpersteine auf dem Weg nach eu-central-1</a>.</p>","date":"2015-01-20T09:00:00.000Z","pubdate":"2015-01-20T09:00:00.000Z","pubDate":"2015-01-20T09:00:00.000Z","link":"http://cloudonauten.de/migration-eu-west-1-eu-central-1/","guid":"3e044a61-9d30-41ae-965f-61bc17ce8d87","author":"Andreas Wittig","comments":null,"origlink":null,"image":{},"source":{},"categories":["aws"],"enclosures":[],"rss:@":{},"rss:title":{"@":{},"#":"Migration eu-west-1 nach eu-central-1"},"rss:description":{"@":{},"#":"<p>Die Cloud ist in Deutschland angekommen. Seit dem 23. Oktober 2014 ist Amazon Web Services (AWS) auch mit Rechenzentren, der Region eu-central-1, in Deutschland (Frankfurt) vertreten. Bisher war Irland der einzige Standort von AWS in Europa. Wenn Sie Dienste bei AWS in Irland betreiben, sollten Sie über eine Migration nach Deutschland (Frankfurt) nachdenken.</p>\n\n<h2 id=\"grndefreucentral1\">Gründe für eu-central-1</h2>\n\n<ul>\n<li><strong>Datenverarbeitung in Deutschland</strong> Die Auslagerung von IT-Infrastuktur war mit dem AWS Standort in Irland bereits mit den deutschen und europäischen Richtlinien bzgl. Datenschutz vereinbar. Mit eu-central-1 kann jetzt auch garantiert werden, dass die Datenverarbeitung innerhalb von Deutschland durchgeführt wird.</li>\n<li><strong>Schneller beim Kunden</strong> Mit AWS in Frankfurt wird der digitale Weg zu Ihren Kunden in Deutschland und auf dem europäischen Festland noch kürzer. Eine Anfrage an Ihren Webserver in Frankfurt hat zum Beispiel aus Stuttgart eine Verzögerung von 10 ms. Eine Verbindung nach Irland hingegen hat eine Verzögerung von 32 ms.</li>\n</ul>\n\n<h2 id=\"problemeundlsungen\">Probleme und Lösungen</h2>\n\n<h3 id=\"infrastruktur\">Infrastruktur</h3>\n\n<p>Die Migration von einem typischen AWS Setup (z.B. Web-Applikation) besteht schnell aus 100 einzelnen Ressourcen, deren Zusammenspiel perfekt aufeinander abgestimmt ist. Betroffen sind Zugriffsregeln im Netzwerk (ACLs und SecurityGroups) und für AWS Ressourcen (IAM). Und auch Ressourcen wie S3, Route53 und CloudWatch müssen mit EC2 und Co. verknüpft werden. Dazu kommen Autoscaling, RDS, ElastiCache und vieles mehr. Bei der Migration muss das komplette Setup der Infrastruktur mit all seinen Abhängigkeiten übertragen werden. Eine große Herausforderung, die sich am Besten durch die Methode \"Infastructure as Code\" meistern lässt. Mit AWS lässt sich das unter anderem durch die Verwendung von CloudFormation umsetzen. Das komplette Setup wird dabei halbautomatisch in ein Template übertragen. Dieses Template kann dann zum Beispiel in der AWS Region eu-central-1 in Deutschland (Frankfurt) automatisiert und zuverlässig eingespielt werden.</p>\n\n<h3 id=\"daten\">Daten</h3>\n\n<p>Neben der Infrastruktur müssen auch die Daten von Irland nach Deutschland transferiert werden. Daten aus Datenbanken (RDS, DynamoDB, ElastiCache) und anderen Datenspeichern (S3, EBS) müssen synchronisiert werden. Je nach Umfang und Art der Daten eine mittlere bis größere Herausforderung. Da AWS Services in der Regel so konzipiert sind, dass sie Daten nur in einer Region ablegen. Für den Transfer der Daten müssen also Lösungen gefunden werden. Für RDS Datenbanken ist ein Transfer der Daten mit einem Cross-Region-Read-Replica-Setup möglich. EBS Laufwerke lassen sich mit einer Snapshot-Kopie von Irland nach Deutschland übertragen. Auch für alle anderen Datenspeicher gibt es automatisierte oder halbautomatisierte Methoden für den Datentransfer.</p>\n\n<h2 id=\"zusammenfassung\">Zusammenfassung</h2>\n\n<p>Die neue Region eu-central-1 ist eine spannende Option für den europäischen Markt. Eine Migration sollte - enstprechende Planung und Vorbereitung vorausgesetzt - problemlos möglich sein. An dieser Stelle noch der Hinweis auf einige kleineren <br>\n <a href=\"http://cloudonauten.de/stolpersteine-auf-dem-weg-nach-eu-central-1/\">Stolpersteine auf dem Weg nach eu-central-1</a>.</p>"},"rss:link":{"@":{},"#":"http://cloudonauten.de/migration-eu-west-1-eu-central-1/"},"rss:guid":{"@":{"ispermalink":"false"},"#":"3e044a61-9d30-41ae-965f-61bc17ce8d87"},"rss:category":{"@":{},"#":"aws"},"dc:creator":{"@":{},"#":"Andreas Wittig"},"rss:pubdate":{"@":{},"#":"Tue, 20 Jan 2015 09:00:00 GMT"},"meta":{"#ns":[{"xmlns:dc":"http://purl.org/dc/elements/1.1/"},{"xmlns:content":"http://purl.org/rss/1.0/modules/content/"},{"xmlns:atom":"http://www.w3.org/2005/Atom"}],"@":[{"xmlns:dc":"http://purl.org/dc/elements/1.1/"},{"xmlns:content":"http://purl.org/rss/1.0/modules/content/"},{"xmlns:atom":"http://www.w3.org/2005/Atom"}],"#xml":{"version":"1.0","encoding":"UTF-8"},"#type":"rss","#version":"2.0","title":"cloudonauten","description":"Cloud Computing im Allgemeinen und AWS im Speziellen.","date":"2015-05-06T12:50:22.000Z","pubdate":"2015-05-06T12:50:22.000Z","pubDate":"2015-05-06T12:50:22.000Z","link":"http://cloudonauten.de/","xmlurl":"http://cloudonauten.de/rss/","xmlUrl":"http://cloudonauten.de/rss/","author":null,"language":null,"favicon":null,"copyright":null,"generator":"Ghost 0.5","cloud":{},"image":{},"categories":[],"rss:@":{},"rss:title":{"@":{},"#":"cloudonauten"},"rss:description":{"@":{},"#":"Cloud Computing im Allgemeinen und AWS im Speziellen."},"rss:link":{"@":{},"#":"http://cloudonauten.de/"},"rss:generator":{"@":{},"#":"Ghost 0.5"},"rss:lastbuilddate":{"@":{},"#":"Wed, 06 May 2015 12:50:22 GMT"},"atom:link":{"@":{"href":"http://cloudonauten.de/rss/","rel":"self","type":"application/rss+xml"}},"rss:ttl":{"@":{},"#":"60"}}},{"title":"AWS Enterprise Summit im März","description":"<p>Am 24. März 2015 findet in Frankfurt der <a href=\"http://aws.amazon.com/de/campaigns/event-enterprise/\">AWS Enterprise Summit</a> statt. Die Agenda verspricht für AWS Einsteiger und Fortgeschrittene eine spannende Konferenz.</p>\n\n<p>Folgende Vorträge stehen auf meiner persönlichen Agenda ganz oben:</p>\n\n<ul>\n<li>Die Cloud ist in Deutschland angekommen, Martin Geier</li>\n<li>Case study für BDSG-compliance, Philip Groth</li>\n<li>Vom Monolithen im Rechenzentrum zu Microservices in der Cloud, Simon Hohenadl</li>\n</ul>\n\n<p>Ich freue mich, mit dem Vortrag <em>Cloud, aber sicher!</em> zum Programm beitragen zu können.</p>","summary":"<p>Am 24. März 2015 findet in Frankfurt der <a href=\"http://aws.amazon.com/de/campaigns/event-enterprise/\">AWS Enterprise Summit</a> statt. Die Agenda verspricht für AWS Einsteiger und Fortgeschrittene eine spannende Konferenz.</p>\n\n<p>Folgende Vorträge stehen auf meiner persönlichen Agenda ganz oben:</p>\n\n<ul>\n<li>Die Cloud ist in Deutschland angekommen, Martin Geier</li>\n<li>Case study für BDSG-compliance, Philip Groth</li>\n<li>Vom Monolithen im Rechenzentrum zu Microservices in der Cloud, Simon Hohenadl</li>\n</ul>\n\n<p>Ich freue mich, mit dem Vortrag <em>Cloud, aber sicher!</em> zum Programm beitragen zu können.</p>","date":"2015-01-18T15:34:00.000Z","pubdate":"2015-01-18T15:34:00.000Z","pubDate":"2015-01-18T15:34:00.000Z","link":"http://cloudonauten.de/aws-enterprise-summit-im-marz/","guid":"75482097-619a-4b47-8495-64c72e4efbe7","author":"Andreas Wittig","comments":null,"origlink":null,"image":{},"source":{},"categories":["aws"],"enclosures":[],"rss:@":{},"rss:title":{"@":{},"#":"AWS Enterprise Summit im März"},"rss:description":{"@":{},"#":"<p>Am 24. März 2015 findet in Frankfurt der <a href=\"http://aws.amazon.com/de/campaigns/event-enterprise/\">AWS Enterprise Summit</a> statt. Die Agenda verspricht für AWS Einsteiger und Fortgeschrittene eine spannende Konferenz.</p>\n\n<p>Folgende Vorträge stehen auf meiner persönlichen Agenda ganz oben:</p>\n\n<ul>\n<li>Die Cloud ist in Deutschland angekommen, Martin Geier</li>\n<li>Case study für BDSG-compliance, Philip Groth</li>\n<li>Vom Monolithen im Rechenzentrum zu Microservices in der Cloud, Simon Hohenadl</li>\n</ul>\n\n<p>Ich freue mich, mit dem Vortrag <em>Cloud, aber sicher!</em> zum Programm beitragen zu können.</p>"},"rss:link":{"@":{},"#":"http://cloudonauten.de/aws-enterprise-summit-im-marz/"},"rss:guid":{"@":{"ispermalink":"false"},"#":"75482097-619a-4b47-8495-64c72e4efbe7"},"rss:category":{"@":{},"#":"aws"},"dc:creator":{"@":{},"#":"Andreas Wittig"},"rss:pubdate":{"@":{},"#":"Sun, 18 Jan 2015 15:34:00 GMT"},"meta":{"#ns":[{"xmlns:dc":"http://purl.org/dc/elements/1.1/"},{"xmlns:content":"http://purl.org/rss/1.0/modules/content/"},{"xmlns:atom":"http://www.w3.org/2005/Atom"}],"@":[{"xmlns:dc":"http://purl.org/dc/elements/1.1/"},{"xmlns:content":"http://purl.org/rss/1.0/modules/content/"},{"xmlns:atom":"http://www.w3.org/2005/Atom"}],"#xml":{"version":"1.0","encoding":"UTF-8"},"#type":"rss","#version":"2.0","title":"cloudonauten","description":"Cloud Computing im Allgemeinen und AWS im Speziellen.","date":"2015-05-06T12:50:22.000Z","pubdate":"2015-05-06T12:50:22.000Z","pubDate":"2015-05-06T12:50:22.000Z","link":"http://cloudonauten.de/","xmlurl":"http://cloudonauten.de/rss/","xmlUrl":"http://cloudonauten.de/rss/","author":null,"language":null,"favicon":null,"copyright":null,"generator":"Ghost 0.5","cloud":{},"image":{},"categories":[],"rss:@":{},"rss:title":{"@":{},"#":"cloudonauten"},"rss:description":{"@":{},"#":"Cloud Computing im Allgemeinen und AWS im Speziellen."},"rss:link":{"@":{},"#":"http://cloudonauten.de/"},"rss:generator":{"@":{},"#":"Ghost 0.5"},"rss:lastbuilddate":{"@":{},"#":"Wed, 06 May 2015 12:50:22 GMT"},"atom:link":{"@":{"href":"http://cloudonauten.de/rss/","rel":"self","type":"application/rss+xml"}},"rss:ttl":{"@":{},"#":"60"}}},{"title":"Elastic Webstack mit CloudFormation","description":"<p>Mit AWS kann man relativ einfach einen elastischen (hochverfügbareren und skallierbaren) Webstack deployen. Als Tool wollen wir dazu <a href=\"http://aws.amazon.com/de/cloudformation/\">CloudFormation</a> einsetzen. Der Fokus soll dabei auf <a href=\"http://aws.amazon.com/de/elasticloadbalancing/\">Elastic Load Balancing (ELB)</a> und <a href=\"http://aws.amazon.com/de/autoscaling/\">Auto Scaling</a> liegen.</p>\n\n<h2 id=\"webstackoverview\">Webstack Overview</h2>\n\n<p><img src=\"http://cloudonauten.de/content/images/2015/01/Web-Stack.png\" alt=\"HA Webstack\"></p>\n\n<h2 id=\"elastizitt\">Elastizität</h2>\n\n<p>Elastic oder auch elastisch ist ein Setup dann, wenn es selbstständig auf eine steigende oder sinkende Last reagierten kann. Bei hoher Last werden zusätzliche Ressourcen angefordert während bei geringer Last Ressourcen abgebaut werden. Liegt die Reaktionszeit innerhalb weniger Minuten kann man von einem elastischen Setup sprechen. Zusäzlich werden ausfallende Server automatisch ersetzt.</p>\n\n<p>Ein elastisches Setup ist daher <strong>skalierbar</strong> und <strong>ausfallsicher</strong>.</p>\n\n<h2 id=\"derkurzlebigeserver\">Der kurzlebige Server</h2>\n\n<p>Ein neuer Server wird beschafft, physikalisch angeschlossen, installiert und konfiguriert und läuft dann über Jahre hinweg. Dieser Ansatz ist wenig flexibel. Der Server wird sehr unterschiedlich ausgelastet, so dass Benutzer manchmal länger und manchmal kürzer auf eine Antwort warten müssen. Werden die Antwortzeiten über einen längeren Zeitraum zu schlecht, wird ein zweiter Server angeschafft. Generell ist der Server eigentlich nur werktags zwischen 8 und 18 Uhr ausgelastet, da er eine interne Applikation im Unternehmen anbietet.</p>\n\n<p>Der kurzlebige Server dagegen wird nur gestartet wenn er benötigt wird. So wird die typische Lebenszeit eines virtuellen Servers eher in Tagen gemessen als in Jahren. Kurzlebige Server benötigen Automatisierung. Vom Beschaffen bis zur Konfiguration muss alles automatisch geschehen.</p>\n\n<table>  \n    <thead>\n        <tr>\n            <th>Schritt</th>\n            <th>langlebig</th>\n            <th>kurzlebig</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Beschaffung</td>\n            <td>Telefonat mit Lieferant</td>\n            <td>AWS API Request</td>\n        </tr>\n        <tr>\n            <td>Verkabeln</td>\n            <td>System-Administrator</td>\n            <td>-</td>\n        </tr>\n        <tr>\n            <td>Installieren</td>\n            <td>System-Administrator</td>\n            <td>Booten von Image (AMI)</td>\n        </tr>\n        <tr>\n            <td>Konfigurieren</td>\n            <td>System-Administrator</td>\n            <td>Puppet / Chef / Skript</td>\n        </tr>\n    </tbody>\n</table>\n\n<h2 id=\"autoscaling\">Auto Scaling</h2>\n\n<p>Eine Auto Scaling Gruppe ist eine Liste von EC2 Instanzen die nach einer Schablone (Launch Configuration) erzeugt werden. Eine Auto Scaling Gruppe kennt ihre minimale und maximale Größe. Außerdem weiß sie über denn IST und SOLL Zustand der aktuellen Instanzen bescheid. Ein Beispiel:</p>\n\n<table>  \n    <thead>\n        <tr>\n            <th>Minimum</th>\n            <th>Maximum</th>\n            <th>SOLL</th>\n            <th>IST</th>\n            <th>Interne Aktion</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>1</td>\n            <td>3</td>\n            <td>2</td>\n            <td>1</td>\n            <td>Neue Instanz nach Schablone starten</td>\n        </tr>\n        <tr>\n            <td>1</td>\n            <td>3</td>\n            <td>2</td>\n            <td>2</td>\n            <td>Nichts passiert</td>\n        </tr>\n        <tr>\n            <td>1</td>\n            <td>3</td>\n            <td>1</td>\n            <td>2</td>\n            <td>Eine Instanz wird terminiert</td>\n        </tr>\n    </tbody>\n</table>\n\n<p>Ein CloudWatch Alarm kann über eine Aktion SOLL um 1 erhöhen oder SOLL um 1 reduzieren wodurch wir automatisch nach z.B. CPU Load die Anzahl der Instanzen regeln können.</p>\n\n<h2 id=\"elasticloadbalancerelb\">Elastic Load Balancer (ELB)</h2>\n\n<p>Wenn sich die Anzahl der Server in einer Auto Scaling Gruppe ständig ändert, wie können wir dann eine Anfrage von einem Kunde überhaupt an den richtigen Server durchreichen? Dabei helfen Load Balancer. Instanzen aus der Auto Scaling Gruppe melden sich beim Load Balancer an. Der Load Balancer führ alle <em>t</em> Sekunden einen Healthcheck durch und prüft ob die Instanz noch verfügbar ist. Erreicht jetzt eine Anfrage den Load Balancer schaut dieser nach, welche Instanzen verfügbar sind und leitet die Anfrage an einen der Server weiter. ELB ist ein von AWS angebotener und hochverfügbarer Service.</p>\n\n<h2 id=\"vereinfachtessetup\">Vereinfachtes Setup</h2>\n\n<p><img src=\"http://cloudonauten.de/content/images/2015/01/Auto-Scaling-2.png\" alt=\"Auto Scaling\"></p>\n\n<h2 id=\"cloudformationtemplate\">CloudFormation Template</h2>\n\n<pre><code>{\n    \"AWSTemplateFormatVersion\": \"2010-09-09\",\n    \"Description\": \"Elastic Webstack\",\n    \"Parameters\": {\n        \"AutoScalingDesiredCapacityParameter\": {\n            \"Description\": \"Desired Capacity for Auto Scaling\",\n            \"Type\": \"Number\",\n            \"Default\": \"2\"\n        },\n        \"AutoScalingMaxSizeParameter\": {\n            \"Description\": \"Max Size for Auto Scaling\",\n            \"Type\": \"Number\",\n            \"Default\": \"3\"\n        },\n        \"AutoScalingMinSizeParameter\": {\n            \"Description\": \"Min Size for Auto Scaling\",\n            \"Type\": \"Number\",\n            \"Default\": \"1\"\n        },\n        \"KeyParameter\": {\n            \"Description\": \"Key name\",\n            \"Type\": \"String\"\n        },\n        \"AMIParameter\": {\n            \"Description\": \"AMI id (default works only in eu-west-1)\",\n            \"Type\": \"String\",\n            \"Default\": \"ami-6e7bd919\"\n        },\n        \"VPCParameter\": {\n            \"Description\": \"VPC id\",\n            \"Type\": \"String\"\n        },\n        \"SubnetsParameter\": {\n            \"Description\": \"Subnet ids (separated by commas)\",\n            \"Type\": \"CommaDelimitedList\"\n        }\n    },\n    \"Resources\": {\n        \"ELBSecurityGroup\": {\n            \"Type\": \"AWS::EC2::SecurityGroup\",\n            \"Properties\": {\n                \"GroupDescription\": \"elastic-loadbalancer\",\n                \"SecurityGroupEgress\": [{\n                    \"IpProtocol\": \"-1\",\n                    \"CidrIp\": \"0.0.0.0/0\"\n                }],\n                \"SecurityGroupIngress\": [{\n                    \"CidrIp\": \"0.0.0.0/0\",\n                    \"FromPort\": 80,\n                    \"IpProtocol\": \"tcp\",\n                    \"ToPort\": 80\n                }],\n                \"VpcId\": {\"Ref\": \"VPCParameter\"}\n            }\n        },\n        \"LoadBalancer\": {\n            \"Type\": \"AWS::ElasticLoadBalancing::LoadBalancer\",\n            \"Properties\": {\n                \"CrossZone\": true,\n                \"HealthCheck\": {\n                    \"HealthyThreshold\": \"2\",\n                    \"Interval\": \"15\",\n                    \"Target\": \"HTTP:8888/\",\n                    \"Timeout\": \"10\",\n                    \"UnhealthyThreshold\": \"2\"\n                },\n                \"LoadBalancerName\": \"elastic-loadbalancer\",\n                \"Listeners\": [{\n                    \"InstancePort\": \"8888\",\n                    \"InstanceProtocol\": \"HTTP\",\n                    \"LoadBalancerPort\": \"80\",\n                    \"Protocol\": \"HTTP\"\n                }],\n                \"Scheme\": \"internet-facing\",\n                \"SecurityGroups\": [{ \"Ref\": \"ELBSecurityGroup\" }],\n                \"Subnets\": {\"Ref\": \"SubnetsParameter\"}\n            }\n        },\n        \"IAMRole\": {\n            \"Type\": \"AWS::IAM::Role\",\n            \"Properties\": {\n                \"AssumeRolePolicyDocument\": {\n                    \"Version\": \"2012-10-17\",\n                    \"Statement\": [{\n                        \"Effect\": \"Allow\",\n                        \"Principal\": {\n                            \"Service\": [ \"ec2.amazonaws.com\" ]\n                        },\n                        \"Action\": [ \"sts:AssumeRole\" ]\n                    }]\n                },\n                \"Path\": \"/\",\n                \"Policies\": []\n            }\n        },\n        \"InstanceProfile\": {\n            \"Type\": \"AWS::IAM::InstanceProfile\",\n            \"Properties\": {\n                \"Path\": \"/\",\n                \"Roles\": [{\"Ref\": \"IAMRole\"}\n                ]\n            }\n        },\n        \"EC2SecurityGroup\": {\n            \"Type\": \"AWS::EC2::SecurityGroup\",\n            \"Properties\": {\n                \"GroupDescription\": \"elastic-instances\",\n                \"SecurityGroupEgress\": [{\n                    \"IpProtocol\": \"-1\",\n                    \"CidrIp\": \"0.0.0.0/0\"\n                }],\n                \"SecurityGroupIngress\": [{\n                    \"CidrIp\": \"0.0.0.0/0\",\n                    \"FromPort\": 22,\n                    \"IpProtocol\": \"tcp\",\n                    \"ToPort\": 22\n                }, {\n                    \"FromPort\": 8888,\n                    \"IpProtocol\": \"tcp\",\n                    \"SourceSecurityGroupId\": {\"Ref\": \"ELBSecurityGroup\"},\n                    \"ToPort\": 8888\n                }],\n                \"VpcId\": {\"Ref\": \"VPCParameter\"}\n            }\n        },\n        \"LaunchConfiguration\": {\n            \"Type\": \"AWS::AutoScaling::LaunchConfiguration\",\n            \"Properties\": {\n                \"AssociatePublicIpAddress\": true,\n                \"EbsOptimized\": false,\n                \"IamInstanceProfile\": {\"Ref\": \"InstanceProfile\"},\n                \"ImageId\": {\"Ref\": \"AMIParameter\"},\n                \"InstanceType\": \"t2.micro\",\n                \"KeyName\": {\"Ref\": \"KeyParameter\"},\n                \"SecurityGroups\": [{ \"Ref\": \"EC2SecurityGroup\" }],\n                \"UserData\": { \"Fn::Base64\": { \"Fn::Join\": [\"\", [\n                    \"#!/bin/bash -ex\\n\",\n                    \"mkdir -p /srv\\n\",\n                    \"cd /srv\\n\",\n                    \"python -m SimpleHTTPServer 8888 &amp;\\n\"\n                ] ] } }\n            }\n        },\n        \"AutoScalingGroup\": {\n            \"Type\": \"AWS::AutoScaling::AutoScalingGroup\",\n            \"Properties\": {\n                \"AvailabilityZones\": { \"Fn::GetAZs\": { \"Ref\": \"AWS::Region\" } },\n                \"DesiredCapacity\": {\"Ref\": \"AutoScalingDesiredCapacityParameter\"},\n                \"LaunchConfigurationName\": { \"Ref\": \"LaunchConfiguration\" },\n                \"MaxSize\": {\"Ref\": \"AutoScalingMaxSizeParameter\"},\n                \"MinSize\": {\"Ref\": \"AutoScalingMinSizeParameter\"},\n                \"VPCZoneIdentifier\": {\"Ref\": \"SubnetsParameter\"},\n                \"LoadBalancerNames\": [{\"Ref\": \"LoadBalancer\"}]\n            }\n        }\n    }\n}\n</code></pre>\n\n<h2 id=\"ergebnis\">Ergebnis</h2>\n\n<ol>\n<li>Eine Instanz ist bei der Auto Scaling Gruppe angemeldet.</li>\n</ol>\n\n<p><img src=\"http://cloudonauten.de/content/images/2015/01/Auto-Scaling-Group.png\" alt=\"Auto Scaling Group\"></p>\n\n<ol>\n<li>Der Load Balancer meldet ebenfalls eine Instanz. Der Healthcheck war erfolgreich und die Instanz ist somit <strong>InService</strong>. (Es kann einige Zeit dauern bis die Instanz bei dir als InService angezeigt wird).</li>\n</ol>\n\n<p><img src=\"http://cloudonauten.de/content/images/2015/01/Load-Balancer-1.png\" alt=\"Load Balancer\"></p>\n\n<h2 id=\"fazit\">Fazit</h2>\n\n<p>Mit AWS kann man mit wenig Aufwandeinen elastischen Webstack erzeugen. Dieser ist nicht nur per se ausfallsicher sondern auch noch skallierbar. Mit Hilfe von CloudWatch Alarmen kann man den SOLL Zustand (Desired Capacity) der Auto Scaling Gruppe dynamisch z.B. in Abhängigkeit der CPU Load der Gruppe anpassen.</p>\n\n<p>Der gezeigte Stack eignet sich nicht nur für Web-Applikationen sondern generell für alle Request / Response Applikationen. Vorraussetzung ist, dass die Server selbst keinen Zustand halten. Zustand gehört in eine Datenbank.</p>","summary":"<p>Mit AWS kann man relativ einfach einen elastischen (hochverfügbareren und skallierbaren) Webstack deployen. Als Tool wollen wir dazu <a href=\"http://aws.amazon.com/de/cloudformation/\">CloudFormation</a> einsetzen. Der Fokus soll dabei auf <a href=\"http://aws.amazon.com/de/elasticloadbalancing/\">Elastic Load Balancing (ELB)</a> und <a href=\"http://aws.amazon.com/de/autoscaling/\">Auto Scaling</a> liegen.</p>\n\n<h2 id=\"webstackoverview\">Webstack Overview</h2>\n\n<p><img src=\"http://cloudonauten.de/content/images/2015/01/Web-Stack.png\" alt=\"HA Webstack\"></p>\n\n<h2 id=\"elastizitt\">Elastizität</h2>\n\n<p>Elastic oder auch elastisch ist ein Setup dann, wenn es selbstständig auf eine steigende oder sinkende Last reagierten kann. Bei hoher Last werden zusätzliche Ressourcen angefordert während bei geringer Last Ressourcen abgebaut werden. Liegt die Reaktionszeit innerhalb weniger Minuten kann man von einem elastischen Setup sprechen. Zusäzlich werden ausfallende Server automatisch ersetzt.</p>\n\n<p>Ein elastisches Setup ist daher <strong>skalierbar</strong> und <strong>ausfallsicher</strong>.</p>\n\n<h2 id=\"derkurzlebigeserver\">Der kurzlebige Server</h2>\n\n<p>Ein neuer Server wird beschafft, physikalisch angeschlossen, installiert und konfiguriert und läuft dann über Jahre hinweg. Dieser Ansatz ist wenig flexibel. Der Server wird sehr unterschiedlich ausgelastet, so dass Benutzer manchmal länger und manchmal kürzer auf eine Antwort warten müssen. Werden die Antwortzeiten über einen längeren Zeitraum zu schlecht, wird ein zweiter Server angeschafft. Generell ist der Server eigentlich nur werktags zwischen 8 und 18 Uhr ausgelastet, da er eine interne Applikation im Unternehmen anbietet.</p>\n\n<p>Der kurzlebige Server dagegen wird nur gestartet wenn er benötigt wird. So wird die typische Lebenszeit eines virtuellen Servers eher in Tagen gemessen als in Jahren. Kurzlebige Server benötigen Automatisierung. Vom Beschaffen bis zur Konfiguration muss alles automatisch geschehen.</p>\n\n<table>  \n    <thead>\n        <tr>\n            <th>Schritt</th>\n            <th>langlebig</th>\n            <th>kurzlebig</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Beschaffung</td>\n            <td>Telefonat mit Lieferant</td>\n            <td>AWS API Request</td>\n        </tr>\n        <tr>\n            <td>Verkabeln</td>\n            <td>System-Administrator</td>\n            <td>-</td>\n        </tr>\n        <tr>\n            <td>Installieren</td>\n            <td>System-Administrator</td>\n            <td>Booten von Image (AMI)</td>\n        </tr>\n        <tr>\n            <td>Konfigurieren</td>\n            <td>System-Administrator</td>\n            <td>Puppet / Chef / Skript</td>\n        </tr>\n    </tbody>\n</table>\n\n<h2 id=\"autoscaling\">Auto Scaling</h2>\n\n<p>Eine Auto Scaling Gruppe ist eine Liste von EC2 Instanzen die nach einer Schablone (Launch Configuration) erzeugt werden. Eine Auto Scaling Gruppe kennt ihre minimale und maximale Größe. Außerdem weiß sie über denn IST und SOLL Zustand der aktuellen Instanzen bescheid. Ein Beispiel:</p>\n\n<table>  \n    <thead>\n        <tr>\n            <th>Minimum</th>\n            <th>Maximum</th>\n            <th>SOLL</th>\n            <th>IST</th>\n            <th>Interne Aktion</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>1</td>\n            <td>3</td>\n            <td>2</td>\n            <td>1</td>\n            <td>Neue Instanz nach Schablone starten</td>\n        </tr>\n        <tr>\n            <td>1</td>\n            <td>3</td>\n            <td>2</td>\n            <td>2</td>\n            <td>Nichts passiert</td>\n        </tr>\n        <tr>\n            <td>1</td>\n            <td>3</td>\n            <td>1</td>\n            <td>2</td>\n            <td>Eine Instanz wird terminiert</td>\n        </tr>\n    </tbody>\n</table>\n\n<p>Ein CloudWatch Alarm kann über eine Aktion SOLL um 1 erhöhen oder SOLL um 1 reduzieren wodurch wir automatisch nach z.B. CPU Load die Anzahl der Instanzen regeln können.</p>\n\n<h2 id=\"elasticloadbalancerelb\">Elastic Load Balancer (ELB)</h2>\n\n<p>Wenn sich die Anzahl der Server in einer Auto Scaling Gruppe ständig ändert, wie können wir dann eine Anfrage von einem Kunde überhaupt an den richtigen Server durchreichen? Dabei helfen Load Balancer. Instanzen aus der Auto Scaling Gruppe melden sich beim Load Balancer an. Der Load Balancer führ alle <em>t</em> Sekunden einen Healthcheck durch und prüft ob die Instanz noch verfügbar ist. Erreicht jetzt eine Anfrage den Load Balancer schaut dieser nach, welche Instanzen verfügbar sind und leitet die Anfrage an einen der Server weiter. ELB ist ein von AWS angebotener und hochverfügbarer Service.</p>\n\n<h2 id=\"vereinfachtessetup\">Vereinfachtes Setup</h2>\n\n<p><img src=\"http://cloudonauten.de/content/images/2015/01/Auto-Scaling-2.png\" alt=\"Auto Scaling\"></p>\n\n<h2 id=\"cloudformationtemplate\">CloudFormation Template</h2>\n\n<pre><code>{\n    \"AWSTemplateFormatVersion\": \"2010-09-09\",\n    \"Description\": \"Elastic Webstack\",\n    \"Parameters\": {\n        \"AutoScalingDesiredCapacityParameter\": {\n            \"Description\": \"Desired Capacity for Auto Scaling\",\n            \"Type\": \"Number\",\n            \"Default\": \"2\"\n        },\n        \"AutoScalingMaxSizeParameter\": {\n            \"Description\": \"Max Size for Auto Scaling\",\n            \"Type\": \"Number\",\n            \"Default\": \"3\"\n        },\n        \"AutoScalingMinSizeParameter\": {\n            \"Description\": \"Min Size for Auto Scaling\",\n            \"Type\": \"Number\",\n            \"Default\": \"1\"\n        },\n        \"KeyParameter\": {\n            \"Description\": \"Key name\",\n            \"Type\": \"String\"\n        },\n        \"AMIParameter\": {\n            \"Description\": \"AMI id (default works only in eu-west-1)\",\n            \"Type\": \"String\",\n            \"Default\": \"ami-6e7bd919\"\n        },\n        \"VPCParameter\": {\n            \"Description\": \"VPC id\",\n            \"Type\": \"String\"\n        },\n        \"SubnetsParameter\": {\n            \"Description\": \"Subnet ids (separated by commas)\",\n            \"Type\": \"CommaDelimitedList\"\n        }\n    },\n    \"Resources\": {\n        \"ELBSecurityGroup\": {\n            \"Type\": \"AWS::EC2::SecurityGroup\",\n            \"Properties\": {\n                \"GroupDescription\": \"elastic-loadbalancer\",\n                \"SecurityGroupEgress\": [{\n                    \"IpProtocol\": \"-1\",\n                    \"CidrIp\": \"0.0.0.0/0\"\n                }],\n                \"SecurityGroupIngress\": [{\n                    \"CidrIp\": \"0.0.0.0/0\",\n                    \"FromPort\": 80,\n                    \"IpProtocol\": \"tcp\",\n                    \"ToPort\": 80\n                }],\n                \"VpcId\": {\"Ref\": \"VPCParameter\"}\n            }\n        },\n        \"LoadBalancer\": {\n            \"Type\": \"AWS::ElasticLoadBalancing::LoadBalancer\",\n            \"Properties\": {\n                \"CrossZone\": true,\n                \"HealthCheck\": {\n                    \"HealthyThreshold\": \"2\",\n                    \"Interval\": \"15\",\n                    \"Target\": \"HTTP:8888/\",\n                    \"Timeout\": \"10\",\n                    \"UnhealthyThreshold\": \"2\"\n                },\n                \"LoadBalancerName\": \"elastic-loadbalancer\",\n                \"Listeners\": [{\n                    \"InstancePort\": \"8888\",\n                    \"InstanceProtocol\": \"HTTP\",\n                    \"LoadBalancerPort\": \"80\",\n                    \"Protocol\": \"HTTP\"\n                }],\n                \"Scheme\": \"internet-facing\",\n                \"SecurityGroups\": [{ \"Ref\": \"ELBSecurityGroup\" }],\n                \"Subnets\": {\"Ref\": \"SubnetsParameter\"}\n            }\n        },\n        \"IAMRole\": {\n            \"Type\": \"AWS::IAM::Role\",\n            \"Properties\": {\n                \"AssumeRolePolicyDocument\": {\n                    \"Version\": \"2012-10-17\",\n                    \"Statement\": [{\n                        \"Effect\": \"Allow\",\n                        \"Principal\": {\n                            \"Service\": [ \"ec2.amazonaws.com\" ]\n                        },\n                        \"Action\": [ \"sts:AssumeRole\" ]\n                    }]\n                },\n                \"Path\": \"/\",\n                \"Policies\": []\n            }\n        },\n        \"InstanceProfile\": {\n            \"Type\": \"AWS::IAM::InstanceProfile\",\n            \"Properties\": {\n                \"Path\": \"/\",\n                \"Roles\": [{\"Ref\": \"IAMRole\"}\n                ]\n            }\n        },\n        \"EC2SecurityGroup\": {\n            \"Type\": \"AWS::EC2::SecurityGroup\",\n            \"Properties\": {\n                \"GroupDescription\": \"elastic-instances\",\n                \"SecurityGroupEgress\": [{\n                    \"IpProtocol\": \"-1\",\n                    \"CidrIp\": \"0.0.0.0/0\"\n                }],\n                \"SecurityGroupIngress\": [{\n                    \"CidrIp\": \"0.0.0.0/0\",\n                    \"FromPort\": 22,\n                    \"IpProtocol\": \"tcp\",\n                    \"ToPort\": 22\n                }, {\n                    \"FromPort\": 8888,\n                    \"IpProtocol\": \"tcp\",\n                    \"SourceSecurityGroupId\": {\"Ref\": \"ELBSecurityGroup\"},\n                    \"ToPort\": 8888\n                }],\n                \"VpcId\": {\"Ref\": \"VPCParameter\"}\n            }\n        },\n        \"LaunchConfiguration\": {\n            \"Type\": \"AWS::AutoScaling::LaunchConfiguration\",\n            \"Properties\": {\n                \"AssociatePublicIpAddress\": true,\n                \"EbsOptimized\": false,\n                \"IamInstanceProfile\": {\"Ref\": \"InstanceProfile\"},\n                \"ImageId\": {\"Ref\": \"AMIParameter\"},\n                \"InstanceType\": \"t2.micro\",\n                \"KeyName\": {\"Ref\": \"KeyParameter\"},\n                \"SecurityGroups\": [{ \"Ref\": \"EC2SecurityGroup\" }],\n                \"UserData\": { \"Fn::Base64\": { \"Fn::Join\": [\"\", [\n                    \"#!/bin/bash -ex\\n\",\n                    \"mkdir -p /srv\\n\",\n                    \"cd /srv\\n\",\n                    \"python -m SimpleHTTPServer 8888 &amp;\\n\"\n                ] ] } }\n            }\n        },\n        \"AutoScalingGroup\": {\n            \"Type\": \"AWS::AutoScaling::AutoScalingGroup\",\n            \"Properties\": {\n                \"AvailabilityZones\": { \"Fn::GetAZs\": { \"Ref\": \"AWS::Region\" } },\n                \"DesiredCapacity\": {\"Ref\": \"AutoScalingDesiredCapacityParameter\"},\n                \"LaunchConfigurationName\": { \"Ref\": \"LaunchConfiguration\" },\n                \"MaxSize\": {\"Ref\": \"AutoScalingMaxSizeParameter\"},\n                \"MinSize\": {\"Ref\": \"AutoScalingMinSizeParameter\"},\n                \"VPCZoneIdentifier\": {\"Ref\": \"SubnetsParameter\"},\n                \"LoadBalancerNames\": [{\"Ref\": \"LoadBalancer\"}]\n            }\n        }\n    }\n}\n</code></pre>\n\n<h2 id=\"ergebnis\">Ergebnis</h2>\n\n<ol>\n<li>Eine Instanz ist bei der Auto Scaling Gruppe angemeldet.</li>\n</ol>\n\n<p><img src=\"http://cloudonauten.de/content/images/2015/01/Auto-Scaling-Group.png\" alt=\"Auto Scaling Group\"></p>\n\n<ol>\n<li>Der Load Balancer meldet ebenfalls eine Instanz. Der Healthcheck war erfolgreich und die Instanz ist somit <strong>InService</strong>. (Es kann einige Zeit dauern bis die Instanz bei dir als InService angezeigt wird).</li>\n</ol>\n\n<p><img src=\"http://cloudonauten.de/content/images/2015/01/Load-Balancer-1.png\" alt=\"Load Balancer\"></p>\n\n<h2 id=\"fazit\">Fazit</h2>\n\n<p>Mit AWS kann man mit wenig Aufwandeinen elastischen Webstack erzeugen. Dieser ist nicht nur per se ausfallsicher sondern auch noch skallierbar. Mit Hilfe von CloudWatch Alarmen kann man den SOLL Zustand (Desired Capacity) der Auto Scaling Gruppe dynamisch z.B. in Abhängigkeit der CPU Load der Gruppe anpassen.</p>\n\n<p>Der gezeigte Stack eignet sich nicht nur für Web-Applikationen sondern generell für alle Request / Response Applikationen. Vorraussetzung ist, dass die Server selbst keinen Zustand halten. Zustand gehört in eine Datenbank.</p>","date":"2015-01-16T06:46:13.000Z","pubdate":"2015-01-16T06:46:13.000Z","pubDate":"2015-01-16T06:46:13.000Z","link":"http://cloudonauten.de/ha-webstack-deployen-mit-cloudformation/","guid":"73cdaa1f-430e-4dd6-af29-e24df3b199f9","author":"Michael Wittig","comments":null,"origlink":null,"image":{},"source":{},"categories":["aws","CloudFormation","EC2","AutoScaling","ELB","Template"],"enclosures":[],"rss:@":{},"rss:title":{"@":{},"#":"Elastic Webstack mit CloudFormation"},"rss:description":{"@":{},"#":"<p>Mit AWS kann man relativ einfach einen elastischen (hochverfügbareren und skallierbaren) Webstack deployen. Als Tool wollen wir dazu <a href=\"http://aws.amazon.com/de/cloudformation/\">CloudFormation</a> einsetzen. Der Fokus soll dabei auf <a href=\"http://aws.amazon.com/de/elasticloadbalancing/\">Elastic Load Balancing (ELB)</a> und <a href=\"http://aws.amazon.com/de/autoscaling/\">Auto Scaling</a> liegen.</p>\n\n<h2 id=\"webstackoverview\">Webstack Overview</h2>\n\n<p><img src=\"http://cloudonauten.de/content/images/2015/01/Web-Stack.png\" alt=\"HA Webstack\"></p>\n\n<h2 id=\"elastizitt\">Elastizität</h2>\n\n<p>Elastic oder auch elastisch ist ein Setup dann, wenn es selbstständig auf eine steigende oder sinkende Last reagierten kann. Bei hoher Last werden zusätzliche Ressourcen angefordert während bei geringer Last Ressourcen abgebaut werden. Liegt die Reaktionszeit innerhalb weniger Minuten kann man von einem elastischen Setup sprechen. Zusäzlich werden ausfallende Server automatisch ersetzt.</p>\n\n<p>Ein elastisches Setup ist daher <strong>skalierbar</strong> und <strong>ausfallsicher</strong>.</p>\n\n<h2 id=\"derkurzlebigeserver\">Der kurzlebige Server</h2>\n\n<p>Ein neuer Server wird beschafft, physikalisch angeschlossen, installiert und konfiguriert und läuft dann über Jahre hinweg. Dieser Ansatz ist wenig flexibel. Der Server wird sehr unterschiedlich ausgelastet, so dass Benutzer manchmal länger und manchmal kürzer auf eine Antwort warten müssen. Werden die Antwortzeiten über einen längeren Zeitraum zu schlecht, wird ein zweiter Server angeschafft. Generell ist der Server eigentlich nur werktags zwischen 8 und 18 Uhr ausgelastet, da er eine interne Applikation im Unternehmen anbietet.</p>\n\n<p>Der kurzlebige Server dagegen wird nur gestartet wenn er benötigt wird. So wird die typische Lebenszeit eines virtuellen Servers eher in Tagen gemessen als in Jahren. Kurzlebige Server benötigen Automatisierung. Vom Beschaffen bis zur Konfiguration muss alles automatisch geschehen.</p>\n\n<table>  \n    <thead>\n        <tr>\n            <th>Schritt</th>\n            <th>langlebig</th>\n            <th>kurzlebig</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Beschaffung</td>\n            <td>Telefonat mit Lieferant</td>\n            <td>AWS API Request</td>\n        </tr>\n        <tr>\n            <td>Verkabeln</td>\n            <td>System-Administrator</td>\n            <td>-</td>\n        </tr>\n        <tr>\n            <td>Installieren</td>\n            <td>System-Administrator</td>\n            <td>Booten von Image (AMI)</td>\n        </tr>\n        <tr>\n            <td>Konfigurieren</td>\n            <td>System-Administrator</td>\n            <td>Puppet / Chef / Skript</td>\n        </tr>\n    </tbody>\n</table>\n\n<h2 id=\"autoscaling\">Auto Scaling</h2>\n\n<p>Eine Auto Scaling Gruppe ist eine Liste von EC2 Instanzen die nach einer Schablone (Launch Configuration) erzeugt werden. Eine Auto Scaling Gruppe kennt ihre minimale und maximale Größe. Außerdem weiß sie über denn IST und SOLL Zustand der aktuellen Instanzen bescheid. Ein Beispiel:</p>\n\n<table>  \n    <thead>\n        <tr>\n            <th>Minimum</th>\n            <th>Maximum</th>\n            <th>SOLL</th>\n            <th>IST</th>\n            <th>Interne Aktion</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>1</td>\n            <td>3</td>\n            <td>2</td>\n            <td>1</td>\n            <td>Neue Instanz nach Schablone starten</td>\n        </tr>\n        <tr>\n            <td>1</td>\n            <td>3</td>\n            <td>2</td>\n            <td>2</td>\n            <td>Nichts passiert</td>\n        </tr>\n        <tr>\n            <td>1</td>\n            <td>3</td>\n            <td>1</td>\n            <td>2</td>\n            <td>Eine Instanz wird terminiert</td>\n        </tr>\n    </tbody>\n</table>\n\n<p>Ein CloudWatch Alarm kann über eine Aktion SOLL um 1 erhöhen oder SOLL um 1 reduzieren wodurch wir automatisch nach z.B. CPU Load die Anzahl der Instanzen regeln können.</p>\n\n<h2 id=\"elasticloadbalancerelb\">Elastic Load Balancer (ELB)</h2>\n\n<p>Wenn sich die Anzahl der Server in einer Auto Scaling Gruppe ständig ändert, wie können wir dann eine Anfrage von einem Kunde überhaupt an den richtigen Server durchreichen? Dabei helfen Load Balancer. Instanzen aus der Auto Scaling Gruppe melden sich beim Load Balancer an. Der Load Balancer führ alle <em>t</em> Sekunden einen Healthcheck durch und prüft ob die Instanz noch verfügbar ist. Erreicht jetzt eine Anfrage den Load Balancer schaut dieser nach, welche Instanzen verfügbar sind und leitet die Anfrage an einen der Server weiter. ELB ist ein von AWS angebotener und hochverfügbarer Service.</p>\n\n<h2 id=\"vereinfachtessetup\">Vereinfachtes Setup</h2>\n\n<p><img src=\"http://cloudonauten.de/content/images/2015/01/Auto-Scaling-2.png\" alt=\"Auto Scaling\"></p>\n\n<h2 id=\"cloudformationtemplate\">CloudFormation Template</h2>\n\n<pre><code>{\n    \"AWSTemplateFormatVersion\": \"2010-09-09\",\n    \"Description\": \"Elastic Webstack\",\n    \"Parameters\": {\n        \"AutoScalingDesiredCapacityParameter\": {\n            \"Description\": \"Desired Capacity for Auto Scaling\",\n            \"Type\": \"Number\",\n            \"Default\": \"2\"\n        },\n        \"AutoScalingMaxSizeParameter\": {\n            \"Description\": \"Max Size for Auto Scaling\",\n            \"Type\": \"Number\",\n            \"Default\": \"3\"\n        },\n        \"AutoScalingMinSizeParameter\": {\n            \"Description\": \"Min Size for Auto Scaling\",\n            \"Type\": \"Number\",\n            \"Default\": \"1\"\n        },\n        \"KeyParameter\": {\n            \"Description\": \"Key name\",\n            \"Type\": \"String\"\n        },\n        \"AMIParameter\": {\n            \"Description\": \"AMI id (default works only in eu-west-1)\",\n            \"Type\": \"String\",\n            \"Default\": \"ami-6e7bd919\"\n        },\n        \"VPCParameter\": {\n            \"Description\": \"VPC id\",\n            \"Type\": \"String\"\n        },\n        \"SubnetsParameter\": {\n            \"Description\": \"Subnet ids (separated by commas)\",\n            \"Type\": \"CommaDelimitedList\"\n        }\n    },\n    \"Resources\": {\n        \"ELBSecurityGroup\": {\n            \"Type\": \"AWS::EC2::SecurityGroup\",\n            \"Properties\": {\n                \"GroupDescription\": \"elastic-loadbalancer\",\n                \"SecurityGroupEgress\": [{\n                    \"IpProtocol\": \"-1\",\n                    \"CidrIp\": \"0.0.0.0/0\"\n                }],\n                \"SecurityGroupIngress\": [{\n                    \"CidrIp\": \"0.0.0.0/0\",\n                    \"FromPort\": 80,\n                    \"IpProtocol\": \"tcp\",\n                    \"ToPort\": 80\n                }],\n                \"VpcId\": {\"Ref\": \"VPCParameter\"}\n            }\n        },\n        \"LoadBalancer\": {\n            \"Type\": \"AWS::ElasticLoadBalancing::LoadBalancer\",\n            \"Properties\": {\n                \"CrossZone\": true,\n                \"HealthCheck\": {\n                    \"HealthyThreshold\": \"2\",\n                    \"Interval\": \"15\",\n                    \"Target\": \"HTTP:8888/\",\n                    \"Timeout\": \"10\",\n                    \"UnhealthyThreshold\": \"2\"\n                },\n                \"LoadBalancerName\": \"elastic-loadbalancer\",\n                \"Listeners\": [{\n                    \"InstancePort\": \"8888\",\n                    \"InstanceProtocol\": \"HTTP\",\n                    \"LoadBalancerPort\": \"80\",\n                    \"Protocol\": \"HTTP\"\n                }],\n                \"Scheme\": \"internet-facing\",\n                \"SecurityGroups\": [{ \"Ref\": \"ELBSecurityGroup\" }],\n                \"Subnets\": {\"Ref\": \"SubnetsParameter\"}\n            }\n        },\n        \"IAMRole\": {\n            \"Type\": \"AWS::IAM::Role\",\n            \"Properties\": {\n                \"AssumeRolePolicyDocument\": {\n                    \"Version\": \"2012-10-17\",\n                    \"Statement\": [{\n                        \"Effect\": \"Allow\",\n                        \"Principal\": {\n                            \"Service\": [ \"ec2.amazonaws.com\" ]\n                        },\n                        \"Action\": [ \"sts:AssumeRole\" ]\n                    }]\n                },\n                \"Path\": \"/\",\n                \"Policies\": []\n            }\n        },\n        \"InstanceProfile\": {\n            \"Type\": \"AWS::IAM::InstanceProfile\",\n            \"Properties\": {\n                \"Path\": \"/\",\n                \"Roles\": [{\"Ref\": \"IAMRole\"}\n                ]\n            }\n        },\n        \"EC2SecurityGroup\": {\n            \"Type\": \"AWS::EC2::SecurityGroup\",\n            \"Properties\": {\n                \"GroupDescription\": \"elastic-instances\",\n                \"SecurityGroupEgress\": [{\n                    \"IpProtocol\": \"-1\",\n                    \"CidrIp\": \"0.0.0.0/0\"\n                }],\n                \"SecurityGroupIngress\": [{\n                    \"CidrIp\": \"0.0.0.0/0\",\n                    \"FromPort\": 22,\n                    \"IpProtocol\": \"tcp\",\n                    \"ToPort\": 22\n                }, {\n                    \"FromPort\": 8888,\n                    \"IpProtocol\": \"tcp\",\n                    \"SourceSecurityGroupId\": {\"Ref\": \"ELBSecurityGroup\"},\n                    \"ToPort\": 8888\n                }],\n                \"VpcId\": {\"Ref\": \"VPCParameter\"}\n            }\n        },\n        \"LaunchConfiguration\": {\n            \"Type\": \"AWS::AutoScaling::LaunchConfiguration\",\n            \"Properties\": {\n                \"AssociatePublicIpAddress\": true,\n                \"EbsOptimized\": false,\n                \"IamInstanceProfile\": {\"Ref\": \"InstanceProfile\"},\n                \"ImageId\": {\"Ref\": \"AMIParameter\"},\n                \"InstanceType\": \"t2.micro\",\n                \"KeyName\": {\"Ref\": \"KeyParameter\"},\n                \"SecurityGroups\": [{ \"Ref\": \"EC2SecurityGroup\" }],\n                \"UserData\": { \"Fn::Base64\": { \"Fn::Join\": [\"\", [\n                    \"#!/bin/bash -ex\\n\",\n                    \"mkdir -p /srv\\n\",\n                    \"cd /srv\\n\",\n                    \"python -m SimpleHTTPServer 8888 &amp;\\n\"\n                ] ] } }\n            }\n        },\n        \"AutoScalingGroup\": {\n            \"Type\": \"AWS::AutoScaling::AutoScalingGroup\",\n            \"Properties\": {\n                \"AvailabilityZones\": { \"Fn::GetAZs\": { \"Ref\": \"AWS::Region\" } },\n                \"DesiredCapacity\": {\"Ref\": \"AutoScalingDesiredCapacityParameter\"},\n                \"LaunchConfigurationName\": { \"Ref\": \"LaunchConfiguration\" },\n                \"MaxSize\": {\"Ref\": \"AutoScalingMaxSizeParameter\"},\n                \"MinSize\": {\"Ref\": \"AutoScalingMinSizeParameter\"},\n                \"VPCZoneIdentifier\": {\"Ref\": \"SubnetsParameter\"},\n                \"LoadBalancerNames\": [{\"Ref\": \"LoadBalancer\"}]\n            }\n        }\n    }\n}\n</code></pre>\n\n<h2 id=\"ergebnis\">Ergebnis</h2>\n\n<ol>\n<li>Eine Instanz ist bei der Auto Scaling Gruppe angemeldet.</li>\n</ol>\n\n<p><img src=\"http://cloudonauten.de/content/images/2015/01/Auto-Scaling-Group.png\" alt=\"Auto Scaling Group\"></p>\n\n<ol>\n<li>Der Load Balancer meldet ebenfalls eine Instanz. Der Healthcheck war erfolgreich und die Instanz ist somit <strong>InService</strong>. (Es kann einige Zeit dauern bis die Instanz bei dir als InService angezeigt wird).</li>\n</ol>\n\n<p><img src=\"http://cloudonauten.de/content/images/2015/01/Load-Balancer-1.png\" alt=\"Load Balancer\"></p>\n\n<h2 id=\"fazit\">Fazit</h2>\n\n<p>Mit AWS kann man mit wenig Aufwandeinen elastischen Webstack erzeugen. Dieser ist nicht nur per se ausfallsicher sondern auch noch skallierbar. Mit Hilfe von CloudWatch Alarmen kann man den SOLL Zustand (Desired Capacity) der Auto Scaling Gruppe dynamisch z.B. in Abhängigkeit der CPU Load der Gruppe anpassen.</p>\n\n<p>Der gezeigte Stack eignet sich nicht nur für Web-Applikationen sondern generell für alle Request / Response Applikationen. Vorraussetzung ist, dass die Server selbst keinen Zustand halten. Zustand gehört in eine Datenbank.</p>"},"rss:link":{"@":{},"#":"http://cloudonauten.de/ha-webstack-deployen-mit-cloudformation/"},"rss:guid":{"@":{"ispermalink":"false"},"#":"73cdaa1f-430e-4dd6-af29-e24df3b199f9"},"rss:category":[{"@":{},"#":"aws"},{"@":{},"#":"CloudFormation"},{"@":{},"#":"EC2"},{"@":{},"#":"AutoScaling"},{"@":{},"#":"ELB"},{"@":{},"#":"Template"}],"dc:creator":{"@":{},"#":"Michael Wittig"},"rss:pubdate":{"@":{},"#":"Fri, 16 Jan 2015 06:46:13 GMT"},"meta":{"#ns":[{"xmlns:dc":"http://purl.org/dc/elements/1.1/"},{"xmlns:content":"http://purl.org/rss/1.0/modules/content/"},{"xmlns:atom":"http://www.w3.org/2005/Atom"}],"@":[{"xmlns:dc":"http://purl.org/dc/elements/1.1/"},{"xmlns:content":"http://purl.org/rss/1.0/modules/content/"},{"xmlns:atom":"http://www.w3.org/2005/Atom"}],"#xml":{"version":"1.0","encoding":"UTF-8"},"#type":"rss","#version":"2.0","title":"cloudonauten","description":"Cloud Computing im Allgemeinen und AWS im Speziellen.","date":"2015-05-06T12:50:22.000Z","pubdate":"2015-05-06T12:50:22.000Z","pubDate":"2015-05-06T12:50:22.000Z","link":"http://cloudonauten.de/","xmlurl":"http://cloudonauten.de/rss/","xmlUrl":"http://cloudonauten.de/rss/","author":null,"language":null,"favicon":null,"copyright":null,"generator":"Ghost 0.5","cloud":{},"image":{},"categories":[],"rss:@":{},"rss:title":{"@":{},"#":"cloudonauten"},"rss:description":{"@":{},"#":"Cloud Computing im Allgemeinen und AWS im Speziellen."},"rss:link":{"@":{},"#":"http://cloudonauten.de/"},"rss:generator":{"@":{},"#":"Ghost 0.5"},"rss:lastbuilddate":{"@":{},"#":"Wed, 06 May 2015 12:50:22 GMT"},"atom:link":{"@":{"href":"http://cloudonauten.de/rss/","rel":"self","type":"application/rss+xml"}},"rss:ttl":{"@":{},"#":"60"}}},{"title":"Warum Amazon Web Services (AWS)?","description":"<p>Amazon Web Services (AWS) ist eine Sammlung verschiedener Webservices des Online-Händlers Amazon.com, die im Jahr 2006 gestartet sind. Zahlreiche populäre Anwendungen wie beispielsweise Dropbox, Foursquare oder Netflix greifen auf die Dienste von Amazon Web Services zurück. Neben Microsoft Windows Azure und Google Cloud Platform zählt AWS zu den bedeutendsten internationalen Angeboten im Cloud Computing und wird als <strong>Pionier der Branche bezeichnet</strong>. <sup id=\"fnref:1\"><a href=\"http://cloudonauten.de/#fn:1\" rel=\"footnote\">1</a></sup></p>\n\n<p>Cloud Computing in dieser Dimension hat aus meiner Sicht folgende Vorteile.</p>\n\n<h2 id=\"vorteile\">Vorteile</h2>\n\n<ol>\n<li><strong>100% variable Kosten</strong> <br>\nSie zahlen bei Cloud Computing nur für die Ressourcen, die Sie tatsächlich nutzen. Sie haben keine initialen Investitionskosten und somit kein gebundenes Kapital.  </li>\n<li><strong>Automatisierung</strong> <br>\nAWS ist zu 100% automatisierbar. Das verwalten der gesamten IT kann <em>programmiert</em> werden. Dadurch werden menschliche Fehler reduziert. Außerdem erhalten Sie si eine exakte Dokumentation Ihrer gesamten IT (Firewall, Nutzerrechte, ...).  </li>\n<li><strong>Tempo und Agilität steigern</strong> <br>\nEin neuer Server ist in AWS innerhalb von wenigen Minuten verfügbar. Starten Sie Experimente mit minimalen Aufwand. Amazon und AWS haben eine große Innovationskraft. Profitieren Sie von innovativen Technologien.  </li>\n<li><strong>Flexible Kapazität</strong> <br>\nSie müssen nie mehr die Kapazität für die nächsten Jahre abschätzen. Brauchen Sie mehr Ressourcen stehen Ihnen diese innerhalb weniger Minuten bereit. Brauchen Sie weniger Ressourcen können Sie diese sofort abschalten. Sie zahlen dabei nur die Ressourcen, die Sie tatsächlich benötigen. Sie können so zum Beispiel auch tagsüber Ressourcen erhöhen und nachts absenken.  </li>\n<li><strong>Von Skaleneffekten profitieren</strong> <br>\nSkaleneffekte sind ein Grundbegriff der Betriebswirtschaftslehre. AWS versorgt Hunderttausenden von Kunden mit Computing Ressourcen und erzielt so Größenvorteiel die Sie alleine nicht erreichen können.  </li>\n<li><strong>Fokus auf Kunden</strong> <br>\nSie fokusieren sich auf Ihre Kunden während AWS sich um ihre Server kümmert. Beschäftigen Sie sich nicht mit dem Betreiben von Rechenzentren und Servern sondern mit den Wünschen Ihrer Kunden.  </li>\n<li><strong>Weltweit</strong> <br>\nSeit dem 23. Oktober ist AWS mit einer eigenen Region in Deutschland (Frankfurt) vertreten. Zusammen mit der Region in Irland haben Sie die Möglichkeit Ihre IT an zwei Standorten innerhalb Europas zu betreiben für maximale Sicherheit. Zusammen mit den Regionen in Brasilien, Japan, Singapur, China und in den USA verfügt AWS damit jetzt über insgesamt 11 Regionen um Ihr weltweites Geschäft mit IT zu versorgen.  </li>\n<li><strong>Professioneller Partner</strong> <br>\nAWS erfüllt u.a. die Vorschriften und Standards: HIPAA, SOC 1 &amp; 2 &amp; 3, PCI DSS Level 1, DIN ISO/IEC 27001, IT Grundschutz, FedRAMP(SM), DIACAP und FISMA, ITAR, FIPS 140-2, CSA, MPAA <sup id=\"fnref:2\"><a href=\"http://cloudonauten.de/#fn:2\" rel=\"footnote\">2</a></sup>. Die Nutzung von AWS kann BDSG konform gestaltet werden.</li>\n</ol>\n\n<p><strong>Quellen</strong></p>\n\n<div class=\"footnotes\"><ol><li class=\"footnote\" id=\"fn:1\"><p><a href=\"http://de.wikipedia.org/wiki/Amazon_Web_Services\">http://de.wikipedia.org/wiki/Amazon_Web_Services</a> <a href=\"http://cloudonauten.de/#fnref:1\" title=\"return to article\">↩</a></p></li>\n<li class=\"footnote\" id=\"fn:2\"><p><a href=\"http://aws.amazon.com/de/compliance/\">http://aws.amazon.com/de/compliance/</a> <a href=\"http://cloudonauten.de/#fnref:2\" title=\"return to article\">↩</a></p></li></ol></div>","summary":"<p>Amazon Web Services (AWS) ist eine Sammlung verschiedener Webservices des Online-Händlers Amazon.com, die im Jahr 2006 gestartet sind. Zahlreiche populäre Anwendungen wie beispielsweise Dropbox, Foursquare oder Netflix greifen auf die Dienste von Amazon Web Services zurück. Neben Microsoft Windows Azure und Google Cloud Platform zählt AWS zu den bedeutendsten internationalen Angeboten im Cloud Computing und wird als <strong>Pionier der Branche bezeichnet</strong>. <sup id=\"fnref:1\"><a href=\"http://cloudonauten.de/#fn:1\" rel=\"footnote\">1</a></sup></p>\n\n<p>Cloud Computing in dieser Dimension hat aus meiner Sicht folgende Vorteile.</p>\n\n<h2 id=\"vorteile\">Vorteile</h2>\n\n<ol>\n<li><strong>100% variable Kosten</strong> <br>\nSie zahlen bei Cloud Computing nur für die Ressourcen, die Sie tatsächlich nutzen. Sie haben keine initialen Investitionskosten und somit kein gebundenes Kapital.  </li>\n<li><strong>Automatisierung</strong> <br>\nAWS ist zu 100% automatisierbar. Das verwalten der gesamten IT kann <em>programmiert</em> werden. Dadurch werden menschliche Fehler reduziert. Außerdem erhalten Sie si eine exakte Dokumentation Ihrer gesamten IT (Firewall, Nutzerrechte, ...).  </li>\n<li><strong>Tempo und Agilität steigern</strong> <br>\nEin neuer Server ist in AWS innerhalb von wenigen Minuten verfügbar. Starten Sie Experimente mit minimalen Aufwand. Amazon und AWS haben eine große Innovationskraft. Profitieren Sie von innovativen Technologien.  </li>\n<li><strong>Flexible Kapazität</strong> <br>\nSie müssen nie mehr die Kapazität für die nächsten Jahre abschätzen. Brauchen Sie mehr Ressourcen stehen Ihnen diese innerhalb weniger Minuten bereit. Brauchen Sie weniger Ressourcen können Sie diese sofort abschalten. Sie zahlen dabei nur die Ressourcen, die Sie tatsächlich benötigen. Sie können so zum Beispiel auch tagsüber Ressourcen erhöhen und nachts absenken.  </li>\n<li><strong>Von Skaleneffekten profitieren</strong> <br>\nSkaleneffekte sind ein Grundbegriff der Betriebswirtschaftslehre. AWS versorgt Hunderttausenden von Kunden mit Computing Ressourcen und erzielt so Größenvorteiel die Sie alleine nicht erreichen können.  </li>\n<li><strong>Fokus auf Kunden</strong> <br>\nSie fokusieren sich auf Ihre Kunden während AWS sich um ihre Server kümmert. Beschäftigen Sie sich nicht mit dem Betreiben von Rechenzentren und Servern sondern mit den Wünschen Ihrer Kunden.  </li>\n<li><strong>Weltweit</strong> <br>\nSeit dem 23. Oktober ist AWS mit einer eigenen Region in Deutschland (Frankfurt) vertreten. Zusammen mit der Region in Irland haben Sie die Möglichkeit Ihre IT an zwei Standorten innerhalb Europas zu betreiben für maximale Sicherheit. Zusammen mit den Regionen in Brasilien, Japan, Singapur, China und in den USA verfügt AWS damit jetzt über insgesamt 11 Regionen um Ihr weltweites Geschäft mit IT zu versorgen.  </li>\n<li><strong>Professioneller Partner</strong> <br>\nAWS erfüllt u.a. die Vorschriften und Standards: HIPAA, SOC 1 &amp; 2 &amp; 3, PCI DSS Level 1, DIN ISO/IEC 27001, IT Grundschutz, FedRAMP(SM), DIACAP und FISMA, ITAR, FIPS 140-2, CSA, MPAA <sup id=\"fnref:2\"><a href=\"http://cloudonauten.de/#fn:2\" rel=\"footnote\">2</a></sup>. Die Nutzung von AWS kann BDSG konform gestaltet werden.</li>\n</ol>\n\n<p><strong>Quellen</strong></p>\n\n<div class=\"footnotes\"><ol><li class=\"footnote\" id=\"fn:1\"><p><a href=\"http://de.wikipedia.org/wiki/Amazon_Web_Services\">http://de.wikipedia.org/wiki/Amazon_Web_Services</a> <a href=\"http://cloudonauten.de/#fnref:1\" title=\"return to article\">↩</a></p></li>\n<li class=\"footnote\" id=\"fn:2\"><p><a href=\"http://aws.amazon.com/de/compliance/\">http://aws.amazon.com/de/compliance/</a> <a href=\"http://cloudonauten.de/#fnref:2\" title=\"return to article\">↩</a></p></li></ol></div>","date":"2015-01-15T10:22:34.000Z","pubdate":"2015-01-15T10:22:34.000Z","pubDate":"2015-01-15T10:22:34.000Z","link":"http://cloudonauten.de/vorteile-von-aws/","guid":"8f57d0b1-98a6-498c-a6da-3e5c800c42bd","author":"Michael Wittig","comments":null,"origlink":null,"image":{},"source":{},"categories":["aws"],"enclosures":[],"rss:@":{},"rss:title":{"@":{},"#":"Warum Amazon Web Services (AWS)?"},"rss:description":{"@":{},"#":"<p>Amazon Web Services (AWS) ist eine Sammlung verschiedener Webservices des Online-Händlers Amazon.com, die im Jahr 2006 gestartet sind. Zahlreiche populäre Anwendungen wie beispielsweise Dropbox, Foursquare oder Netflix greifen auf die Dienste von Amazon Web Services zurück. Neben Microsoft Windows Azure und Google Cloud Platform zählt AWS zu den bedeutendsten internationalen Angeboten im Cloud Computing und wird als <strong>Pionier der Branche bezeichnet</strong>. <sup id=\"fnref:1\"><a href=\"http://cloudonauten.de/#fn:1\" rel=\"footnote\">1</a></sup></p>\n\n<p>Cloud Computing in dieser Dimension hat aus meiner Sicht folgende Vorteile.</p>\n\n<h2 id=\"vorteile\">Vorteile</h2>\n\n<ol>\n<li><strong>100% variable Kosten</strong> <br>\nSie zahlen bei Cloud Computing nur für die Ressourcen, die Sie tatsächlich nutzen. Sie haben keine initialen Investitionskosten und somit kein gebundenes Kapital.  </li>\n<li><strong>Automatisierung</strong> <br>\nAWS ist zu 100% automatisierbar. Das verwalten der gesamten IT kann <em>programmiert</em> werden. Dadurch werden menschliche Fehler reduziert. Außerdem erhalten Sie si eine exakte Dokumentation Ihrer gesamten IT (Firewall, Nutzerrechte, ...).  </li>\n<li><strong>Tempo und Agilität steigern</strong> <br>\nEin neuer Server ist in AWS innerhalb von wenigen Minuten verfügbar. Starten Sie Experimente mit minimalen Aufwand. Amazon und AWS haben eine große Innovationskraft. Profitieren Sie von innovativen Technologien.  </li>\n<li><strong>Flexible Kapazität</strong> <br>\nSie müssen nie mehr die Kapazität für die nächsten Jahre abschätzen. Brauchen Sie mehr Ressourcen stehen Ihnen diese innerhalb weniger Minuten bereit. Brauchen Sie weniger Ressourcen können Sie diese sofort abschalten. Sie zahlen dabei nur die Ressourcen, die Sie tatsächlich benötigen. Sie können so zum Beispiel auch tagsüber Ressourcen erhöhen und nachts absenken.  </li>\n<li><strong>Von Skaleneffekten profitieren</strong> <br>\nSkaleneffekte sind ein Grundbegriff der Betriebswirtschaftslehre. AWS versorgt Hunderttausenden von Kunden mit Computing Ressourcen und erzielt so Größenvorteiel die Sie alleine nicht erreichen können.  </li>\n<li><strong>Fokus auf Kunden</strong> <br>\nSie fokusieren sich auf Ihre Kunden während AWS sich um ihre Server kümmert. Beschäftigen Sie sich nicht mit dem Betreiben von Rechenzentren und Servern sondern mit den Wünschen Ihrer Kunden.  </li>\n<li><strong>Weltweit</strong> <br>\nSeit dem 23. Oktober ist AWS mit einer eigenen Region in Deutschland (Frankfurt) vertreten. Zusammen mit der Region in Irland haben Sie die Möglichkeit Ihre IT an zwei Standorten innerhalb Europas zu betreiben für maximale Sicherheit. Zusammen mit den Regionen in Brasilien, Japan, Singapur, China und in den USA verfügt AWS damit jetzt über insgesamt 11 Regionen um Ihr weltweites Geschäft mit IT zu versorgen.  </li>\n<li><strong>Professioneller Partner</strong> <br>\nAWS erfüllt u.a. die Vorschriften und Standards: HIPAA, SOC 1 &amp; 2 &amp; 3, PCI DSS Level 1, DIN ISO/IEC 27001, IT Grundschutz, FedRAMP(SM), DIACAP und FISMA, ITAR, FIPS 140-2, CSA, MPAA <sup id=\"fnref:2\"><a href=\"http://cloudonauten.de/#fn:2\" rel=\"footnote\">2</a></sup>. Die Nutzung von AWS kann BDSG konform gestaltet werden.</li>\n</ol>\n\n<p><strong>Quellen</strong></p>\n\n<div class=\"footnotes\"><ol><li class=\"footnote\" id=\"fn:1\"><p><a href=\"http://de.wikipedia.org/wiki/Amazon_Web_Services\">http://de.wikipedia.org/wiki/Amazon_Web_Services</a> <a href=\"http://cloudonauten.de/#fnref:1\" title=\"return to article\">↩</a></p></li>\n<li class=\"footnote\" id=\"fn:2\"><p><a href=\"http://aws.amazon.com/de/compliance/\">http://aws.amazon.com/de/compliance/</a> <a href=\"http://cloudonauten.de/#fnref:2\" title=\"return to article\">↩</a></p></li></ol></div>"},"rss:link":{"@":{},"#":"http://cloudonauten.de/vorteile-von-aws/"},"rss:guid":{"@":{"ispermalink":"false"},"#":"8f57d0b1-98a6-498c-a6da-3e5c800c42bd"},"rss:category":{"@":{},"#":"aws"},"dc:creator":{"@":{},"#":"Michael Wittig"},"rss:pubdate":{"@":{},"#":"Thu, 15 Jan 2015 10:22:34 GMT"},"meta":{"#ns":[{"xmlns:dc":"http://purl.org/dc/elements/1.1/"},{"xmlns:content":"http://purl.org/rss/1.0/modules/content/"},{"xmlns:atom":"http://www.w3.org/2005/Atom"}],"@":[{"xmlns:dc":"http://purl.org/dc/elements/1.1/"},{"xmlns:content":"http://purl.org/rss/1.0/modules/content/"},{"xmlns:atom":"http://www.w3.org/2005/Atom"}],"#xml":{"version":"1.0","encoding":"UTF-8"},"#type":"rss","#version":"2.0","title":"cloudonauten","description":"Cloud Computing im Allgemeinen und AWS im Speziellen.","date":"2015-05-06T12:50:22.000Z","pubdate":"2015-05-06T12:50:22.000Z","pubDate":"2015-05-06T12:50:22.000Z","link":"http://cloudonauten.de/","xmlurl":"http://cloudonauten.de/rss/","xmlUrl":"http://cloudonauten.de/rss/","author":null,"language":null,"favicon":null,"copyright":null,"generator":"Ghost 0.5","cloud":{},"image":{},"categories":[],"rss:@":{},"rss:title":{"@":{},"#":"cloudonauten"},"rss:description":{"@":{},"#":"Cloud Computing im Allgemeinen und AWS im Speziellen."},"rss:link":{"@":{},"#":"http://cloudonauten.de/"},"rss:generator":{"@":{},"#":"Ghost 0.5"},"rss:lastbuilddate":{"@":{},"#":"Wed, 06 May 2015 12:50:22 GMT"},"atom:link":{"@":{"href":"http://cloudonauten.de/rss/","rel":"self","type":"application/rss+xml"}},"rss:ttl":{"@":{},"#":"60"}}}]